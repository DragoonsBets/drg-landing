{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _requestAnimationFrame = require('dom-helpers/util/requestAnimationFrame');\n\nvar _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _dates = require('./utils/dates');\n\nvar _dates2 = _interopRequireDefault(_dates);\n\nvar _DayColumn = require('./DayColumn');\n\nvar _DayColumn2 = _interopRequireDefault(_DayColumn);\n\nvar _TimeGutter = require('./TimeGutter');\n\nvar _TimeGutter2 = _interopRequireDefault(_TimeGutter);\n\nvar _width = require('dom-helpers/query/width');\n\nvar _width2 = _interopRequireDefault(_width);\n\nvar _TimeGridHeader = require('./TimeGridHeader');\n\nvar _TimeGridHeader2 = _interopRequireDefault(_TimeGridHeader);\n\nvar _propTypes3 = require('./utils/propTypes');\n\nvar _helpers = require('./utils/helpers');\n\nvar _accessors = require('./utils/accessors');\n\nvar _eventLevels = require('./utils/eventLevels');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar TimeGrid = function (_Component) {\n  _inherits(TimeGrid, _Component);\n\n  function TimeGrid(props) {\n    _classCallCheck(this, TimeGrid);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.handleResize = function () {\n      _requestAnimationFrame2.default.cancel(_this.rafHandle);\n\n      _this.rafHandle = (0, _requestAnimationFrame2.default)(_this.checkOverflow);\n    };\n\n    _this.gutterRef = function (ref) {\n      _this.gutter = ref && (0, _reactDom.findDOMNode)(ref);\n    };\n\n    _this.handleSelectAlldayEvent = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      } //cancel any pending selections so only the event click goes through.\n\n\n      _this.clearSelection();\n\n      (0, _helpers.notify)(_this.props.onSelectEvent, args);\n    };\n\n    _this.handleSelectAllDaySlot = function (slots, slotInfo) {\n      var onSelectSlot = _this.props.onSelectSlot;\n      (0, _helpers.notify)(onSelectSlot, {\n        slots: slots,\n        start: slots[0],\n        end: slots[slots.length - 1],\n        action: slotInfo.action\n      });\n    };\n\n    _this.checkOverflow = function () {\n      if (_this._updatingOverflow) return;\n      var isOverflowing = _this.refs.content.scrollHeight > _this.refs.content.clientHeight;\n\n      if (_this.state.isOverflowing !== isOverflowing) {\n        _this._updatingOverflow = true;\n\n        _this.setState({\n          isOverflowing: isOverflowing\n        }, function () {\n          _this._updatingOverflow = false;\n        });\n      }\n    };\n\n    _this.state = {\n      gutterWidth: undefined,\n      isOverflowing: null\n    };\n    return _this;\n  }\n\n  TimeGrid.prototype.componentWillMount = function componentWillMount() {\n    this.calculateScroll();\n  };\n\n  TimeGrid.prototype.componentDidMount = function componentDidMount() {\n    this.checkOverflow();\n\n    if (this.props.width == null) {\n      this.measureGutter();\n    }\n\n    this.applyScroll();\n    this.positionTimeIndicator();\n    this.triggerTimeIndicatorUpdate();\n    window.addEventListener('resize', this.handleResize);\n  };\n\n  TimeGrid.prototype.componentWillUnmount = function componentWillUnmount() {\n    window.clearTimeout(this._timeIndicatorTimeout);\n    window.removeEventListener('resize', this.handleResize);\n\n    _requestAnimationFrame2.default.cancel(this.rafHandle);\n  };\n\n  TimeGrid.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.props.width == null) {\n      this.measureGutter();\n    }\n\n    this.applyScroll();\n    this.positionTimeIndicator(); //this.checkOverflow()\n  };\n\n  TimeGrid.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _props = this.props,\n        range = _props.range,\n        scrollToTime = _props.scrollToTime; // When paginating, reset scroll\n\n    if (!_dates2.default.eq(nextProps.range[0], range[0], 'minute') || !_dates2.default.eq(nextProps.scrollToTime, scrollToTime, 'minute')) {\n      this.calculateScroll(nextProps);\n    }\n  };\n\n  TimeGrid.prototype.renderEvents = function renderEvents(range, events, today, resources) {\n    var _this2 = this;\n\n    var _props2 = this.props,\n        min = _props2.min,\n        max = _props2.max,\n        endAccessor = _props2.endAccessor,\n        startAccessor = _props2.startAccessor,\n        resourceAccessor = _props2.resourceAccessor,\n        resourceIdAccessor = _props2.resourceIdAccessor,\n        components = _props2.components;\n    return range.map(function (date, idx) {\n      var daysEvents = events.filter(function (event) {\n        return _dates2.default.inRange(date, (0, _accessors.accessor)(event, startAccessor), (0, _accessors.accessor)(event, endAccessor), 'day');\n      });\n      return resources.map(function (resource, id) {\n        var eventsToDisplay = !resource ? daysEvents : daysEvents.filter(function (event) {\n          return (0, _accessors.accessor)(event, resourceAccessor) === (0, _accessors.accessor)(resource, resourceIdAccessor);\n        });\n        return _react2.default.createElement(_DayColumn2.default, _extends({}, _this2.props, {\n          min: _dates2.default.merge(date, min),\n          max: _dates2.default.merge(date, max),\n          resource: (0, _accessors.accessor)(resource, resourceIdAccessor),\n          eventComponent: components.event,\n          eventWrapperComponent: components.eventWrapper,\n          timeSlotWrapperComponent: components.dayWrapper,\n          className: (0, _classnames2.default)({\n            'rbc-now': _dates2.default.eq(date, today, 'day')\n          }),\n          key: idx + '-' + id,\n          date: date,\n          events: eventsToDisplay\n        }));\n      });\n    });\n  };\n\n  TimeGrid.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props3 = this.props,\n        events = _props3.events,\n        range = _props3.range,\n        width = _props3.width,\n        startAccessor = _props3.startAccessor,\n        endAccessor = _props3.endAccessor,\n        selected = _props3.selected,\n        getNow = _props3.getNow,\n        resources = _props3.resources,\n        components = _props3.components,\n        allDayAccessor = _props3.allDayAccessor,\n        eventPropGetter = _props3.eventPropGetter,\n        showMultiDayTimes = _props3.showMultiDayTimes,\n        longPressThreshold = _props3.longPressThreshold;\n    width = width || this.state.gutterWidth;\n    var start = range[0],\n        end = range[range.length - 1];\n    this.slots = range.length;\n    var allDayEvents = [],\n        rangeEvents = [];\n    events.forEach(function (event) {\n      if ((0, _eventLevels.inRange)(event, start, end, _this3.props)) {\n        var eStart = (0, _accessors.accessor)(event, startAccessor),\n            eEnd = (0, _accessors.accessor)(event, endAccessor);\n\n        if ((0, _accessors.accessor)(event, allDayAccessor) || _dates2.default.isJustDate(eStart) && _dates2.default.isJustDate(eEnd) || !showMultiDayTimes && !_dates2.default.eq(eStart, eEnd, 'day')) {\n          allDayEvents.push(event);\n        } else {\n          rangeEvents.push(event);\n        }\n      }\n    });\n    allDayEvents.sort(function (a, b) {\n      return (0, _eventLevels.sortEvents)(a, b, _this3.props);\n    });\n    return _react2.default.createElement('div', {\n      className: 'rbc-time-view'\n    }, _react2.default.createElement(_TimeGridHeader2.default, {\n      range: range,\n      events: allDayEvents,\n      width: width,\n      getNow: getNow,\n      dayFormat: this.props.dayFormat,\n      culture: this.props.culture,\n      resources: resources,\n      selected: selected,\n      selectable: this.props.selectable,\n      startAccessor: startAccessor,\n      endAccessor: endAccessor,\n      titleAccessor: this.props.titleAccessor,\n      tooltipAccessor: this.props.tooltipAccessor,\n      allDayAccessor: this.props.allDayAccessor,\n      resourceAccessor: this.props.resourceAccessor,\n      resourceIdAccessor: this.props.resourceIdAccessor,\n      resourceTitleAccessor: this.props.resourceTitleAccessor,\n      isOverflowing: this.state.isOverflowing,\n      dayPropGetter: this.props.dayPropGetter,\n      eventPropGetter: eventPropGetter,\n      longPressThreshold: longPressThreshold,\n      headerComponent: components.header,\n      eventComponent: components.event,\n      eventWrapperComponent: components.eventWrapper,\n      dateCellWrapperComponent: components.dateCellWrapper,\n      onSelectSlot: this.handleSelectAllDaySlot,\n      onSelectEvent: this.handleSelectAlldayEvent,\n      onDoubleClickEvent: this.props.onDoubleClickEvent,\n      onDrillDown: this.props.onDrillDown,\n      getDrilldownView: this.props.getDrilldownView\n    }), _react2.default.createElement('div', {\n      ref: 'content',\n      className: 'rbc-time-content'\n    }, _react2.default.createElement(_TimeGutter2.default, _extends({}, this.props, {\n      date: start,\n      ref: this.gutterRef,\n      className: 'rbc-time-gutter'\n    })), this.renderEvents(range, rangeEvents, getNow(), resources || [null]), _react2.default.createElement('div', {\n      ref: 'timeIndicator',\n      className: 'rbc-current-time-indicator'\n    })));\n  };\n\n  TimeGrid.prototype.clearSelection = function clearSelection() {\n    clearTimeout(this._selectTimer);\n    this._pendingSelection = [];\n  };\n\n  TimeGrid.prototype.measureGutter = function measureGutter() {\n    var width = (0, _width2.default)(this.gutter);\n\n    if (width && this.state.gutterWidth !== width) {\n      this.setState({\n        gutterWidth: width\n      });\n    }\n  };\n\n  TimeGrid.prototype.applyScroll = function applyScroll() {\n    if (this._scrollRatio) {\n      var content = this.refs.content;\n      content.scrollTop = content.scrollHeight * this._scrollRatio; // Only do this once\n\n      this._scrollRatio = null;\n    }\n  };\n\n  TimeGrid.prototype.calculateScroll = function calculateScroll() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    var min = props.min,\n        max = props.max,\n        scrollToTime = props.scrollToTime;\n\n    var diffMillis = scrollToTime - _dates2.default.startOf(scrollToTime, 'day');\n\n    var totalMillis = _dates2.default.diff(max, min);\n\n    this._scrollRatio = diffMillis / totalMillis;\n  };\n\n  TimeGrid.prototype.positionTimeIndicator = function positionTimeIndicator() {\n    var _props4 = this.props,\n        rtl = _props4.rtl,\n        min = _props4.min,\n        max = _props4.max,\n        getNow = _props4.getNow,\n        range = _props4.range;\n    var current = getNow();\n\n    var secondsGrid = _dates2.default.diff(max, min, 'seconds');\n\n    var secondsPassed = _dates2.default.diff(current, min, 'seconds');\n\n    var timeIndicator = this.refs.timeIndicator;\n    var factor = secondsPassed / secondsGrid;\n    var timeGutter = this.gutter;\n    var content = this.refs.content;\n\n    if (timeGutter && current >= min && current <= max) {\n      var pixelHeight = timeGutter.offsetHeight;\n      var dayPixelWidth = (content.offsetWidth - timeGutter.offsetWidth) / this.slots;\n      var dayOffset = range.findIndex(function (d) {\n        return _dates2.default.eq(d, _dates2.default.today(), 'day');\n      }) * dayPixelWidth;\n      var offset = Math.floor(factor * pixelHeight);\n      timeIndicator.style.display = dayOffset >= 0 ? 'block' : 'none';\n      timeIndicator.style[rtl ? 'left' : 'right'] = 0;\n      timeIndicator.style[rtl ? 'right' : 'left'] = timeGutter.offsetWidth + dayOffset + 'px';\n      timeIndicator.style.top = offset + 'px';\n      timeIndicator.style.width = dayPixelWidth + 'px';\n    } else {\n      timeIndicator.style.display = 'none';\n    }\n  };\n\n  TimeGrid.prototype.triggerTimeIndicatorUpdate = function triggerTimeIndicatorUpdate() {\n    var _this4 = this; // Update the position of the time indicator every minute\n\n\n    this._timeIndicatorTimeout = window.setTimeout(function () {\n      _this4.positionTimeIndicator();\n\n      _this4.triggerTimeIndicatorUpdate();\n    }, 60000);\n  };\n\n  return TimeGrid;\n}(_react.Component);\n\nTimeGrid.propTypes = {\n  events: _propTypes2.default.array.isRequired,\n  resources: _propTypes2.default.array,\n  step: _propTypes2.default.number,\n  range: _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(Date)),\n  min: _propTypes2.default.instanceOf(Date),\n  max: _propTypes2.default.instanceOf(Date),\n  getNow: _propTypes2.default.func.isRequired,\n  scrollToTime: _propTypes2.default.instanceOf(Date),\n  eventPropGetter: _propTypes2.default.func,\n  dayPropGetter: _propTypes2.default.func,\n  dayFormat: _propTypes3.dateFormat,\n  showMultiDayTimes: _propTypes2.default.bool,\n  culture: _propTypes2.default.string,\n  rtl: _propTypes2.default.bool,\n  width: _propTypes2.default.number,\n  titleAccessor: _propTypes3.accessor.isRequired,\n  tooltipAccessor: _propTypes3.accessor.isRequired,\n  allDayAccessor: _propTypes3.accessor.isRequired,\n  startAccessor: _propTypes3.accessor.isRequired,\n  endAccessor: _propTypes3.accessor.isRequired,\n  resourceAccessor: _propTypes3.accessor.isRequired,\n  resourceIdAccessor: _propTypes3.accessor.isRequired,\n  resourceTitleAccessor: _propTypes3.accessor.isRequired,\n  selected: _propTypes2.default.object,\n  selectable: _propTypes2.default.oneOf([true, false, 'ignoreEvents']),\n  longPressThreshold: _propTypes2.default.number,\n  onNavigate: _propTypes2.default.func,\n  onSelectSlot: _propTypes2.default.func,\n  onSelectEnd: _propTypes2.default.func,\n  onSelectStart: _propTypes2.default.func,\n  onSelectEvent: _propTypes2.default.func,\n  onDoubleClickEvent: _propTypes2.default.func,\n  onDrillDown: _propTypes2.default.func,\n  getDrilldownView: _propTypes2.default.func.isRequired,\n  messages: _propTypes2.default.object,\n  components: _propTypes2.default.object.isRequired\n};\nTimeGrid.defaultProps = {\n  step: 30,\n  timeslots: 2,\n  min: _dates2.default.startOf(new Date(), 'day'),\n  max: _dates2.default.endOf(new Date(), 'day'),\n  scrollToTime: _dates2.default.startOf(new Date(), 'day')\n};\nexports.default = TimeGrid;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}