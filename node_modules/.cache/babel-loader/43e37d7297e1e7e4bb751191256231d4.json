{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.set = set;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar localePropType = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]);\n\nfunction _format(localizer, formatter, value, format, culture) {\n  var result = typeof format === 'function' ? format(value, culture, localizer) : formatter.call(localizer, value, format, culture);\n  !(result == null || typeof result === 'string') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '`localizer format(..)` must return a string, null, or undefined') : (0, _invariant2.default)(false) : void 0;\n  return result;\n}\n\nvar DateLocalizer = function DateLocalizer(spec) {\n  var _this = this;\n\n  _classCallCheck(this, DateLocalizer);\n\n  !(typeof spec.format === 'function') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'date localizer `format(..)` must be a function') : (0, _invariant2.default)(false) : void 0;\n  !(typeof spec.parse === 'function') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'date localizer `parse(..)` must be a function') : (0, _invariant2.default)(false) : void 0;\n  !(typeof spec.firstOfWeek === 'function') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'date localizer `firstOfWeek(..)` must be a function') : (0, _invariant2.default)(false) : void 0;\n  this.propType = spec.propType || localePropType;\n  this.formats = spec.formats;\n  this.startOfWeek = spec.firstOfWeek;\n\n  this.format = function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _format.apply(undefined, [_this, spec.format].concat(args));\n  };\n\n  this.parse = function (value, format, culture) {\n    var result = spec.parse.call(_this, value, format, culture);\n    !(result == null || result instanceof Date && !isNaN(result.getTime())) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'date localizer `parse(..)` must return a valid Date, null, or undefined') : (0, _invariant2.default)(false) : void 0;\n    return result;\n  };\n};\n\nvar localizer = {\n  parse: error,\n  format: error,\n  startOfWeek: error\n};\n\nfunction set(newLocalizer) {\n  if (!newLocalizer.__isLocalizer__) {\n    newLocalizer = new DateLocalizer(newLocalizer);\n    newLocalizer.__isLocalizer__ = true;\n  }\n\n  localizer = newLocalizer;\n  return localizer;\n}\n\nvar exp = {\n  parse: function parse() {\n    var _localizer;\n\n    return (_localizer = localizer).parse.apply(_localizer, arguments);\n  },\n  format: function format() {\n    var _localizer2;\n\n    return (_localizer2 = localizer).format.apply(_localizer2, arguments);\n  },\n  startOfWeek: function startOfWeek() {\n    var _localizer3;\n\n    return (_localizer3 = localizer).startOfWeek.apply(_localizer3, arguments);\n  }\n};\nexports.default = exp;\n\nfunction error() {\n  throw new Error('You have not selected a localization strategy for Big Calendar. ' + 'Please use either of the two included.');\n}","map":null,"metadata":{},"sourceType":"script"}