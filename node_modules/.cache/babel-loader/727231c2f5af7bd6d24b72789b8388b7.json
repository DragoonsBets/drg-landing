{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable */\n\n\nvar defaultSelectInputComponent = function defaultSelectInputComponent(props) {\n  return _react2.default.createElement('input', {\n    type: props.selectType || 'checkbox',\n    'aria-label': (props.checked ? 'Un-select' : 'Select') + ' row with id:' + props.id,\n    checked: props.checked,\n    id: props.id,\n    onClick: function onClick(e) {\n      var shiftKey = e.shiftKey;\n      e.stopPropagation();\n      props.onClick(props.id, shiftKey, props.row);\n    },\n    onChange: function onChange() {}\n  });\n};\n\nexports.default = function (Component, options) {\n  var wrapper = function (_React$Component) {\n    _inherits(RTSelectTable, _React$Component);\n\n    function RTSelectTable(props) {\n      _classCallCheck(this, RTSelectTable);\n\n      return _possibleConstructorReturn(this, (RTSelectTable.__proto__ || Object.getPrototypeOf(RTSelectTable)).call(this, props));\n    }\n\n    _createClass(RTSelectTable, [{\n      key: 'rowSelector',\n      value: function rowSelector(row) {\n        if (!row || !row.hasOwnProperty(this.props.keyField)) return null;\n        var _props = this.props,\n            toggleSelection = _props.toggleSelection,\n            selectType = _props.selectType,\n            keyField = _props.keyField;\n        var checked = this.props.isSelected(row[this.props.keyField]);\n        var inputProps = {\n          checked: checked,\n          onClick: toggleSelection,\n          selectType: selectType,\n          row: row,\n          id: 'select-' + row[keyField]\n        };\n        return _react2.default.createElement(this.props.SelectInputComponent, inputProps);\n      }\n    }, {\n      key: 'headSelector',\n      value: function headSelector(row) {\n        var selectType = this.props.selectType;\n        if (selectType === 'radio') return null;\n        var _props2 = this.props,\n            toggleAll = _props2.toggleAll,\n            checked = _props2.selectAll,\n            SelectAllInputComponent = _props2.SelectAllInputComponent;\n        var inputProps = {\n          checked: checked,\n          onClick: toggleAll,\n          selectType: selectType,\n          id: 'select-all'\n        };\n        return _react2.default.createElement(SelectAllInputComponent, inputProps);\n      } // this is so we can expose the underlying ReactTable to get at the sortedData for selectAll\n\n    }, {\n      key: 'getWrappedInstance',\n      value: function getWrappedInstance() {\n        if (!this.wrappedInstance) console.warn('RTSelectTable - No wrapped instance');\n        if (this.wrappedInstance.getWrappedInstance) return this.wrappedInstance.getWrappedInstance();else return this.wrappedInstance;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var _props3 = this.props,\n            originalCols = _props3.columns,\n            isSelected = _props3.isSelected,\n            toggleSelection = _props3.toggleSelection,\n            toggleAll = _props3.toggleAll,\n            keyField = _props3.keyField,\n            selectAll = _props3.selectAll,\n            selectType = _props3.selectType,\n            selectWidth = _props3.selectWidth,\n            SelectAllInputComponent = _props3.SelectAllInputComponent,\n            SelectInputComponent = _props3.SelectInputComponent,\n            rest = _objectWithoutProperties(_props3, ['columns', 'isSelected', 'toggleSelection', 'toggleAll', 'keyField', 'selectAll', 'selectType', 'selectWidth', 'SelectAllInputComponent', 'SelectInputComponent']);\n\n        var select = {\n          id: '_selector',\n          accessor: function accessor() {\n            return 'x';\n          },\n          // this value is not important\n          Header: this.headSelector.bind(this),\n          Cell: function Cell(ci) {\n            return _this2.rowSelector.bind(_this2)(ci.original);\n          },\n          width: selectWidth || 30,\n          filterable: false,\n          sortable: false,\n          resizable: false,\n          style: {\n            textAlign: 'center'\n          }\n        };\n        var columns = options !== undefined && options.floatingLeft === true ? [].concat(_toConsumableArray(originalCols), [select]) : [select].concat(_toConsumableArray(originalCols));\n        var extra = {\n          columns: columns\n        };\n        return _react2.default.createElement(Component, _extends({}, rest, extra, {\n          ref: function ref(r) {\n            return _this2.wrappedInstance = r;\n          }\n        }));\n      }\n    }]);\n\n    return RTSelectTable;\n  }(_react2.default.Component);\n\n  wrapper.displayName = 'RTSelectTable';\n  wrapper.defaultProps = {\n    keyField: '_id',\n    isSelected: function isSelected(key) {\n      console.log('No isSelected handler provided:', {\n        key: key\n      });\n    },\n    selectAll: false,\n    toggleSelection: function toggleSelection(key, shift, row) {\n      console.log('No toggleSelection handler provided:', {\n        key: key,\n        shift: shift,\n        row: row\n      });\n    },\n    toggleAll: function toggleAll() {\n      console.log('No toggleAll handler provided.');\n    },\n    selectType: 'checkbox',\n    SelectInputComponent: defaultSelectInputComponent,\n    SelectAllInputComponent: defaultSelectInputComponent\n  };\n  return wrapper;\n};","map":null,"metadata":{},"sourceType":"script"}