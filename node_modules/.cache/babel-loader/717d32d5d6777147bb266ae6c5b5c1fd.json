{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _ProgressBar = _interopRequireDefault(require(\"./ProgressBar\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ToastrBox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ToastrBox, _React$Component);\n\n  function ToastrBox(props) {\n    var _this;\n\n    _classCallCheck(this, ToastrBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToastrBox).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePressEnterOrSpaceKeyToastr\", function (e) {\n      if (e.key === ' ' || e.key === 'enter') {\n        _this.handleClickToastr(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickToastr\", function () {\n      var _this$props$item$opti = _this.props.item.options,\n          onToastrClick = _this$props$item$opti.onToastrClick,\n          closeOnToastrClick = _this$props$item$opti.closeOnToastrClick;\n      _this.ignoreIsHiding = true;\n\n      if (onToastrClick) {\n        onToastrClick();\n      }\n\n      if (closeOnToastrClick) {\n        _this._setShouldClose(true);\n\n        _this._removeToastr();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickCloseButton\", function (e) {\n      var onCloseButtonClick = _this.props.item.options.onCloseButtonClick;\n      e.stopPropagation();\n      _this.ignoreIsHiding = true;\n\n      if (onCloseButtonClick) {\n        onCloseButtonClick();\n      }\n\n      _this._setShouldClose(true);\n\n      _this._removeToastr();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseEnter\", function () {\n      clearTimeout(_this.intervalId);\n\n      _this._setIntervalId(null);\n\n      _this._setIsHiding(false);\n\n      var progressBar = _this.props.item.options.progressBar;\n\n      var timeOut = _this._getItemTimeOut();\n\n      if (timeOut && progressBar) {\n        _this.setState({\n          progressBar: null\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseLeave\", function () {\n      var _this$props$item$opti2 = _this.props.item.options,\n          removeOnHover = _this$props$item$opti2.removeOnHover,\n          removeOnHoverTimeOut = _this$props$item$opti2.removeOnHoverTimeOut;\n\n      if (!_this.isHiding && (removeOnHover || _this.shouldClose)) {\n        var interval = removeOnHover === true ? removeOnHoverTimeOut || 1000 : removeOnHover;\n\n        _this._setIntervalId(setTimeout(_this._removeToastr, interval));\n\n        var progressBar = _this.props.item.options.progressBar;\n\n        var timeOut = _this._getItemTimeOut();\n\n        if (timeOut && progressBar) {\n          _this.setState({\n            progressBar: {\n              duration: interval\n            }\n          });\n        }\n      }\n    });\n\n    var _props$item$options = props.item.options,\n        transitionIn = _props$item$options.transitionIn,\n        transitionOut = _props$item$options.transitionOut;\n    _this.isHiding = false;\n    _this.shouldClose = false;\n    _this.intervalId = null;\n    _this.ignoreIsHiding = false;\n    _this.transitionIn = transitionIn || _this.props.transitionIn;\n    _this.transitionOut = transitionOut || _this.props.transitionOut; // an identifier to facilitate aria labelling for a11y for multiple instances of the component family in the DOM\n\n    _this.id = Math.floor(Math.random() * 9999);\n    _this.state = {\n      progressBar: null\n    };\n    (0, _utils._bind)(['renderSubComponent', 'renderIcon', 'renderToastr', 'renderCloseButton', 'renderMessage', '_onAnimationComplete', '_removeToastr', '_setTransition', '_clearTransition', '_setIntervalId', '_setIsHiding', '_setShouldClose'], _assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ToastrBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var item = this.props.item;\n      if (this.props.inMemory[item.id]) return;\n\n      var timeOut = this._getItemTimeOut();\n\n      if (timeOut) {\n        this._setIntervalId(setTimeout(this._removeToastr, timeOut));\n      }\n\n      if (timeOut && item.options.progressBar) {\n        this.setState({\n          progressBar: {\n            duration: this._getItemTimeOut()\n          }\n        });\n      }\n\n      this._setTransition();\n\n      (0, _utils.onCSSTransitionEnd)(this.toastrBoxElement, this._onAnimationComplete);\n      this.props.addToMemory(item.id);\n\n      if (this.closeButton !== undefined) {\n        this.closeButton.focus();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.intervalId) {\n        clearTimeout(this.intervalId);\n      } // when toast unloads the toast close button automatically focuses on the next toast control (if any)\n      // need to add a micro delay to allow the DOM to recycle\n\n\n      setTimeout(function () {\n        if (document.getElementsByClassName('toastr-control').length > 0) {\n          document.getElementsByClassName('toastr-control')[0].focus();\n        }\n      }, 50);\n    }\n  }, {\n    key: \"handlePressEnterOrSpaceKeyCloseButton\",\n    value: function handlePressEnterOrSpaceKeyCloseButton(e) {\n      if (e.key === ' ' || e.key === 'enter') {\n        this.handleClickCloseButton(e);\n      }\n    }\n  }, {\n    key: \"renderSubComponent\",\n    value: function renderSubComponent() {\n      var _this2 = this;\n\n      var _this$props$item = this.props.item,\n          id = _this$props$item.id,\n          options = _this$props$item.options;\n\n      var removeCurrentToastrFunc = function removeCurrentToastrFunc() {\n        return _this2.props.remove(id);\n      };\n\n      if ((0, _react.isValidElement)(options.component)) {\n        return _react.default.cloneElement(options.component, {\n          remove: removeCurrentToastrFunc\n        });\n      }\n\n      return _react.default.createElement(options.component, {\n        remove: removeCurrentToastrFunc\n      });\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon() {\n      var _this$props$item2 = this.props.item,\n          type = _this$props$item2.type,\n          options = _this$props$item2.options;\n\n      if ((0, _react.isValidElement)(options.icon)) {\n        return _react.default.cloneElement(options.icon);\n      }\n\n      var iconName = type === 'light' ? options.icon : type;\n      return _react.default.createElement(_Icon.default, {\n        name: iconName\n      });\n    }\n  }, {\n    key: \"renderCloseButton\",\n    value: function renderCloseButton() {\n      var _this3 = this;\n\n      return _react.default.createElement(\"button\", {\n        tabIndex: \"0\",\n        type: \"button\",\n        className: \"close-toastr toastr-control\",\n        \"aria-label\": \"toast\",\n        onClick: this.handleClickCloseButton,\n        ref: function ref(_ref) {\n          return _this3.closeButton = _ref;\n        }\n      }, \"\\u2715\");\n    }\n  }, {\n    key: \"renderToastr\",\n    value: function renderToastr() {\n      var _this$props$item3 = this.props.item,\n          type = _this$props$item3.type,\n          options = _this$props$item3.options,\n          message = _this$props$item3.message,\n          title = _this$props$item3.title;\n      return _react.default.createElement(\"div\", null, _react.default.createElement(\"div\", {\n        className: \"rrt-left-container\"\n      }, _react.default.createElement(\"div\", {\n        className: \"rrt-holder\"\n      }, this.renderIcon())), options.status && type === 'light' && _react.default.createElement(\"div\", {\n        className: (0, _classnames.default)('toastr-status', options.status)\n      }), _react.default.createElement(\"div\", {\n        className: \"rrt-middle-container\",\n        role: \"alertdialog\",\n        \"aria-labelledby\": \"dialogTitle-\".concat(this.id),\n        \"aria-describedby\": \"dialogDesc-\".concat(this.id)\n      }, title && _react.default.createElement(\"div\", {\n        id: \"dialogTitle-\".concat(this.id),\n        className: \"rrt-title\"\n      }, title), message && _react.default.createElement(\"div\", {\n        id: \"dialogDesc-\".concat(this.id),\n        className: \"rrt-text\"\n      }, message), options.component && this.renderSubComponent()), _react.default.createElement(\"div\", {\n        className: \"rrt-right-container\"\n      }, options.showCloseButton && this.renderCloseButton()), this.state.progressBar ? _react.default.createElement(_ProgressBar.default, this.state.progressBar) : null);\n    }\n  }, {\n    key: \"renderMessage\",\n    value: function renderMessage() {\n      var _this$props$item4 = this.props.item,\n          title = _this$props$item4.title,\n          message = _this$props$item4.message,\n          options = _this$props$item4.options;\n      return _react.default.createElement(\"div\", null, _react.default.createElement(\"div\", {\n        className: \"rrt-title\"\n      }, title, this.renderCloseButton()), _react.default.createElement(\"div\", {\n        className: \"rrt-text\"\n      }, message, options.component && this.renderSubComponent()));\n    }\n  }, {\n    key: \"toastr\",\n    value: function toastr() {\n      if (this.props.item.type === 'message') {\n        return this.renderMessage();\n      }\n\n      return this.renderToastr();\n    }\n  }, {\n    key: \"_getItemTimeOut\",\n    value: function _getItemTimeOut() {\n      var item = this.props.item;\n      var timeOut = item.options.timeOut;\n\n      if (typeof timeOut === 'undefined') {\n        timeOut = this.props.timeOut;\n      }\n\n      return timeOut;\n    }\n  }, {\n    key: \"_onAnimationComplete\",\n    value: function _onAnimationComplete() {\n      var _this$props = this.props,\n          remove = _this$props.remove,\n          item = _this$props.item;\n      var options = item.options,\n          id = item.id;\n\n      if (this.isHiding || this.ignoreIsHiding) {\n        this._setIsHiding(false);\n\n        this.ignoreIsHiding = false;\n        remove(id);\n\n        if (options.onHideComplete) {\n          options.onHideComplete();\n        }\n      } else if (!this.isHiding && options.onShowComplete) {\n        options.onShowComplete();\n      }\n    }\n  }, {\n    key: \"_removeToastr\",\n    value: function _removeToastr() {\n      if (!this.isHiding) {\n        this._setIsHiding(true);\n\n        this._setTransition(true);\n\n        (0, _utils.onCSSTransitionEnd)(this.toastrBoxElement, this._onAnimationComplete);\n      }\n    }\n  }, {\n    key: \"_setTransition\",\n    value: function _setTransition(hide) {\n      var _this4 = this;\n\n      var animationType = hide ? this.transitionOut : this.transitionIn;\n\n      var onEndListener = function onEndListener(e) {\n        if (e && e.target == _this4.toastrBoxElement) {\n          _this4.toastrBoxElement.classList.remove(animationType);\n        }\n      };\n\n      if (this.toastrBoxElement) {\n        (0, _utils.onCSSTransitionEnd)(this.toastrBoxElement, onEndListener);\n        this.toastrBoxElement.classList.add(animationType);\n      }\n    }\n  }, {\n    key: \"_clearTransition\",\n    value: function _clearTransition() {\n      if (this.toastrBoxElement) {\n        this.toastrBoxElement.classList.remove(this.transitionIn, this.transitionOut);\n      }\n    }\n  }, {\n    key: \"_setIntervalId\",\n    value: function _setIntervalId(intervalId) {\n      this.intervalId = intervalId;\n    }\n  }, {\n    key: \"_setIsHiding\",\n    value: function _setIsHiding(val) {\n      this.isHiding = val;\n    }\n  }, {\n    key: \"_setShouldClose\",\n    value: function _setShouldClose(val) {\n      this.shouldClose = val;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$props$item5 = this.props.item,\n          options = _this$props$item5.options,\n          type = _this$props$item5.type;\n      var onToastrClick = options.onToastrClick,\n          closeOnToastrClick = options.closeOnToastrClick;\n      var hasOnToastrClick = !!onToastrClick;\n      var doesCloseOnToastrClick = closeOnToastrClick;\n      var toastrClickAttributes = {};\n\n      if (hasOnToastrClick || doesCloseOnToastrClick) {\n        toastrClickAttributes.role = 'button';\n        toastrClickAttributes.tabIndex = 0;\n        toastrClickAttributes.onClick = this.handleClickToastr;\n        toastrClickAttributes.onKeyPress = this.handlePressEnterOrSpaceKeyToastr;\n      }\n\n      return _react.default.createElement(\"div\", _extends({\n        ref: function ref(_ref2) {\n          return _this5.toastrBoxElement = _ref2;\n        },\n        className: (0, _classnames.default)('toastr', 'animated', 'rrt-' + type, options.className),\n        onMouseEnter: this.mouseEnter,\n        onMouseLeave: this.mouseLeave\n      }, toastrClickAttributes), this.toastr());\n    }\n  }]);\n\n  return ToastrBox;\n}(_react.default.Component);\n\nexports.default = ToastrBox;\n\n_defineProperty(ToastrBox, \"displayName\", 'ToastrBox');\n\n_defineProperty(ToastrBox, \"propTypes\", {\n  item: _propTypes.default.shape({\n    options: _propTypes.default.shape({\n      transitionIn: _propTypes.default.string,\n      transitionOut: _propTypes.default.string\n    })\n  })\n});","map":null,"metadata":{},"sourceType":"script"}