{"ast":null,"code":"import _classCallCheck from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ranaway/Documents/Proyectos/apex-react-drg/src/views/components/extra/examples/dndMultipleTarget.js\";\nimport React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"; // fake data generator\n\nvar getItems = function getItems(count) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Array.from({\n    length: count\n  }, function (v, k) {\n    return k;\n  }).map(function (k) {\n    return {\n      id: \"item-\".concat(k + offset),\n      content: \"item \".concat(k + offset)\n    };\n  });\n}; // a little function to help us with reordering the result\n\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\n * Moves an item from one list to another list.\n */\n\n\nvar move = function move(source, destination, droppableSource, droppableDestination) {\n  var sourceClone = Array.from(source);\n  var destClone = Array.from(destination);\n\n  var _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),\n      _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),\n      removed = _sourceClone$splice2[0];\n\n  destClone.splice(droppableDestination.index, 0, removed);\n  var result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\n\nvar grid = 8;\n\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: \"0 0 \".concat(grid, \"px 0\"),\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\"\n  }, draggableStyle);\n};\n\nvar getListStyle = function getListStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    padding: grid,\n    width: 250\n  };\n};\n\nvar multipleTarget =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(multipleTarget, _Component);\n\n  function multipleTarget() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, multipleTarget);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(multipleTarget)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n    };\n    _this.id2List = {\n      droppable: \"items\",\n      droppable2: \"selected\"\n    };\n\n    _this.getList = function (id) {\n      return _this.state[_this.id2List[id]];\n    };\n\n    _this.onDragEnd = function (result) {\n      var source = result.source,\n          destination = result.destination; // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        var items = reorder(_this.getList(source.droppableId), source.index, destination.index);\n        var state = {\n          items: items\n        };\n\n        if (source.droppableId === \"droppable2\") {\n          state = {\n            selected: items\n          };\n        }\n\n        _this.setState(state);\n      } else {\n        var _result = move(_this.getList(source.droppableId), _this.getList(destination.droppableId), source, destination);\n\n        _this.setState({\n          items: _result.droppable,\n          selected: _result.droppable2\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(multipleTarget, [{\n    key: \"render\",\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"d-flex justify-content-around\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"droppable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, _this2.state.items.map(function (item, index) {\n          return React.createElement(Draggable, {\n            key: item.id,\n            draggableId: item.id,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, function (provided, snapshot) {\n            return React.createElement(\"div\", Object.assign({\n              className: \"white bg-success\",\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 132\n              },\n              __self: this\n            }), item.content);\n          });\n        }), provided.placeholder);\n      }), React.createElement(Droppable, {\n        droppableId: \"droppable2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, function (provided, snapshot) {\n        return React.createElement(\"div\", {\n          ref: provided.innerRef,\n          style: getListStyle(snapshot.isDraggingOver),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, _this2.state.selected.map(function (item, index) {\n          return React.createElement(Draggable, {\n            key: item.id,\n            draggableId: item.id,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157\n            },\n            __self: this\n          }, function (provided, snapshot) {\n            return React.createElement(\"div\", Object.assign({\n              className: \"white bg-danger\",\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 163\n              },\n              __self: this\n            }), item.content);\n          });\n        }), provided.placeholder);\n      })));\n    }\n  }]);\n\n  return multipleTarget;\n}(Component);\n\nexport default multipleTarget;","map":{"version":3,"sources":["/Users/ranaway/Documents/Proyectos/apex-react-drg/src/views/components/extra/examples/dndMultipleTarget.js"],"names":["React","Component","DragDropContext","Droppable","Draggable","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","multipleTarget","state","items","selected","id2List","droppable","droppable2","getList","onDragEnd","setState","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n   Array.from({ length: count }, (v, k) => k).map(k => ({\n      id: `item-${k + offset}`,\n      content: `item ${k + offset}`\n   }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n   const result = Array.from(list);\n   const [removed] = result.splice(startIndex, 1);\n   result.splice(endIndex, 0, removed);\n\n   return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n   const sourceClone = Array.from(source);\n   const destClone = Array.from(destination);\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n   destClone.splice(droppableDestination.index, 0, removed);\n\n   const result = {};\n   result[droppableSource.droppableId] = sourceClone;\n   result[droppableDestination.droppableId] = destClone;\n\n   return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n   // some basic styles to make the items look a bit nicer\n   userSelect: \"none\",\n   padding: grid * 2,\n   margin: `0 0 ${grid}px 0`,\n\n   // change background colour if dragging\n   background: isDragging ? \"lightgreen\" : \"grey\",\n\n   // styles we need to apply on draggables\n   ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n   padding: grid,\n   width: 250\n});\n\nclass multipleTarget extends Component {\n   state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n   };\n\n   /**\n    * A semi-generic way to handle multiple lists. Matches\n    * the IDs of the droppable container to the names of the\n    * source arrays stored in the state.\n    */\n   id2List = {\n      droppable: \"items\",\n      droppable2: \"selected\"\n   };\n\n   getList = id => this.state[this.id2List[id]];\n\n   onDragEnd = result => {\n      const { source, destination } = result;\n\n      // dropped outside the list\n      if (!destination) {\n         return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n         const items = reorder(\n            this.getList(source.droppableId),\n            source.index,\n            destination.index\n         );\n\n         let state = { items };\n\n         if (source.droppableId === \"droppable2\") {\n            state = { selected: items };\n         }\n\n         this.setState(state);\n      } else {\n         const result = move(\n            this.getList(source.droppableId),\n            this.getList(destination.droppableId),\n            source,\n            destination\n         );\n\n         this.setState({\n            items: result.droppable,\n            selected: result.droppable2\n         });\n      }\n   };\n\n   // Normally you would want to split things out into separate components.\n   // But in this example everything is just done in one place for simplicity\n   render() {\n      return (\n         <div className=\"d-flex justify-content-around\">\n            <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n               {(provided, snapshot) => (\n                  <div\n                     ref={provided.innerRef}\n                     style={getListStyle(snapshot.isDraggingOver)}\n                  >\n                     {this.state.items.map((item, index) => (\n                        <Draggable\n                           key={item.id}\n                           draggableId={item.id}\n                           index={index}\n                        >\n                           {(provided, snapshot) => (\n                              <div className=\"white bg-success\"\n                                 ref={provided.innerRef}\n                                 {...provided.draggableProps}\n                                 {...provided.dragHandleProps}\n                                 style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                 )}\n                              >\n                                 {item.content}\n                              </div>\n                           )}\n                        </Draggable>\n                     ))}\n                     {provided.placeholder}\n                  </div>\n               )}\n            </Droppable>\n            <Droppable droppableId=\"droppable2\">\n               {(provided, snapshot) => (\n                  <div\n                     ref={provided.innerRef}\n                     style={getListStyle(snapshot.isDraggingOver)}\n                  >\n                     {this.state.selected.map((item, index) => (\n                        <Draggable\n                           key={item.id}\n                           draggableId={item.id}\n                           index={index}\n                        >\n                           {(provided, snapshot) => (\n                              <div className=\"white bg-danger\"\n                                 ref={provided.innerRef}\n                                 {...provided.draggableProps}\n                                 {...provided.dragHandleProps}\n                                 style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                 )}\n                              >\n                                 {item.content}\n                              </div>\n                           )}\n                        </Draggable>\n                     ))}\n                     {provided.placeholder}\n                  </div>\n               )}\n            </Droppable>\n         </DragDropContext>\n         </div>\n      );\n   }\n}\n\nexport default multipleTarget;\n"]},"metadata":{},"sourceType":"module"}