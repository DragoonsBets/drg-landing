{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Button = _interopRequireDefault(require(\"./Button\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ENTER = 13;\nvar ESC = 27;\n\nvar ToastrConfirm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ToastrConfirm, _React$Component);\n\n  function ToastrConfirm(props) {\n    var _this;\n\n    _classCallCheck(this, ToastrConfirm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToastrConfirm).call(this, props));\n    var _this$props = _this.props,\n        confirmOptions = _this$props.confirmOptions,\n        confirm = _this$props.confirm;\n    var _confirm$options = confirm.options,\n        okText = _confirm$options.okText,\n        cancelText = _confirm$options.cancelText,\n        transitionIn = _confirm$options.transitionIn,\n        transitionOut = _confirm$options.transitionOut,\n        disableCancel = _confirm$options.disableCancel;\n    _this.okText = okText || confirmOptions.okText;\n    _this.cancelText = cancelText || confirmOptions.cancelText;\n    _this.transitionIn = transitionIn || confirmOptions.transitionIn || props.transitionIn;\n    _this.transitionOut = transitionOut || confirmOptions.transitionOut || props.transitionOut;\n    _this.disableCancel = disableCancel || confirmOptions.disableCancel;\n    (0, _utils._bind)('setTransition removeConfirm handleOnKeyUp handleOnKeyDown', _assertThisInitialized(_this));\n    _this.isKeyDown = false; // an identifier to facilitate aria labelling for a11y for multiple instances of the component family in the DOM\n\n    _this.id = Math.floor(Math.random() * 9999);\n    return _this;\n  }\n\n  _createClass(ToastrConfirm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.isHiding = false;\n      this.hasClicked = false;\n      this.confirmHolderElement.focus();\n\n      if (this.props.confirm.show) {\n        this.setTransition(true);\n      } // when toast loads the toast close button automatically focuses on the toast control\n\n\n      if (this.closeButton !== undefined && this.closeButton.focus !== undefined) {\n        this.closeButton.focus();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // when toast unloads the toast close button automatically focuses on the next toast control (if any)\n      // need to add a micro delay to allow the DOM to recycle\n      setTimeout(function () {\n        if (document.getElementsByClassName('toastr-control').length > 0) {\n          document.getElementsByClassName('toastr-control')[0].focus();\n        }\n      }, 50);\n    }\n  }, {\n    key: \"handleOnKeyDown\",\n    value: function handleOnKeyDown(e) {\n      if ((0, _utils.keyCode)(e) == ENTER) {\n        e.preventDefault();\n      }\n\n      this.isKeyDown = true;\n    }\n  }, {\n    key: \"handleButtonClick\",\n    value: function handleButtonClick(callback) {\n      var _this2 = this;\n\n      if (this.hasClicked) return;\n      this.hasClicked = true;\n\n      var onAnimationEnd = function onAnimationEnd() {\n        _this2.removeConfirm();\n\n        if (callback) {\n          callback();\n        }\n      };\n\n      this.setTransition();\n      (0, _utils.onCSSTransitionEnd)(this.confirmElement, onAnimationEnd);\n    }\n  }, {\n    key: \"handleConfirmClick\",\n    value: function handleConfirmClick() {\n      var callback = this.props.confirm.options ? this.props.confirm.options.onOk : null;\n      this.handleButtonClick(callback);\n    }\n  }, {\n    key: \"handleCancelClick\",\n    value: function handleCancelClick() {\n      var callback = this.props.confirm.options ? this.props.confirm.options.onCancel : null;\n      this.handleButtonClick(callback);\n    }\n  }, {\n    key: \"setTransition\",\n    value: function setTransition(add) {\n      if (add) {\n        this.isHiding = false;\n        this.confirmElement.classList.add(this.transitionIn);\n        if ((0, _utils.isBrowser)()) return document.querySelector('body').classList.add('toastr-confirm-active');\n      }\n\n      this.isHiding = true;\n      this.confirmElement.classList.remove(this.transitionIn);\n      this.confirmElement.classList.add(this.transitionOut);\n    }\n  }, {\n    key: \"removeConfirm\",\n    value: function removeConfirm() {\n      this.isHiding = false;\n      this.props.hideConfirm();\n      if ((0, _utils.isBrowser)()) return document.querySelector('body').classList.remove('toastr-confirm-active');\n    }\n  }, {\n    key: \"handleOnKeyUp\",\n    value: function handleOnKeyUp(e) {\n      var code = (0, _utils.keyCode)(e);\n\n      if (code == ESC && !this.disableCancel) {\n        this.handleCancelClick();\n      } else if (code == ESC && this.disableCancel) {\n        this.handleConfirmClick();\n      } else if (code == ENTER && this.isKeyDown) {\n        this.isKeyDown = false;\n        this.handleConfirmClick();\n      }\n    }\n  }, {\n    key: \"containsOkButton\",\n    value: function containsOkButton(buttons) {\n      return buttons && buttons.filter(function (button) {\n        return button.ok === true;\n      }).length > 0;\n    }\n  }, {\n    key: \"containsCancelButton\",\n    value: function containsCancelButton(buttons) {\n      return buttons && buttons.filter(function (button) {\n        return button.cancel === true;\n      }).length > 0;\n    }\n  }, {\n    key: \"getCustomButtonHandler\",\n    value: function getCustomButtonHandler(config) {\n      var _this3 = this;\n\n      if (config.ok === true) {\n        return this.handleConfirmClick.bind(this);\n      }\n\n      if (config.cancel === true) {\n        return this.handleCancelClick.bind(this);\n      }\n\n      return function () {\n        return _this3.handleButtonClick(config.handler);\n      };\n    }\n  }, {\n    key: \"getCustomButtonText\",\n    value: function getCustomButtonText(config) {\n      if (config.ok === true) {\n        return this.okText;\n      }\n\n      if (config.cancel === true) {\n        return this.cancelText;\n      }\n\n      return config.text;\n    }\n  }, {\n    key: \"getCustomButtonClassName\",\n    value: function getCustomButtonClassName(config) {\n      if (config.ok === true) {\n        return 'rrt-ok-btn';\n      }\n\n      if (config.cancel === true) {\n        return 'rrt-cancel-btn';\n      }\n\n      return config.className;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props$confirm = this.props.confirm,\n          options = _this$props$confirm.options,\n          message = _this$props$confirm.message;\n      return _react.default.createElement(\"div\", {\n        className: \"rrt-confirm-holder\",\n        tabIndex: \"-1\",\n        ref: function ref(_ref4) {\n          return _this4.confirmHolderElement = _ref4;\n        },\n        onKeyDown: this.handleOnKeyDown,\n        onKeyUp: this.handleOnKeyUp,\n        role: \"alert\"\n      }, _react.default.createElement(\"div\", {\n        className: \"rrt-confirm animated\",\n        ref: function ref(_ref3) {\n          return _this4.confirmElement = _ref3;\n        },\n        role: \"alertdialog\",\n        \"aria-describedby\": \"dialogDesc-\".concat(this.id)\n      }, message && _react.default.createElement(\"div\", {\n        className: \"rrt-message\",\n        id: \"dialogDesc-\".concat(this.id)\n      }, message), options.component && _react.default.createElement(options.component, null), _react.default.createElement(\"div\", {\n        className: \"rrt-buttons-holder\"\n      }, !this.containsOkButton(options.buttons) && _react.default.createElement(_Button.default, {\n        tabIndex: \"0\",\n        ref: function ref(_ref) {\n          return _this4.closeButton = _ref;\n        },\n        className: \"rrt-ok-btn toastr-control\",\n        onClick: function onClick() {\n          return _this4.handleConfirmClick();\n        }\n      }, this.okText), !this.disableCancel && !this.containsCancelButton(options.buttons) && _react.default.createElement(_Button.default, {\n        tabIndex: \"0\",\n        ref: function ref(_ref2) {\n          return _this4.closeButton = _ref2;\n        },\n        className: \"rrt-cancel-btn toastr-control\",\n        onClick: this.handleCancelClick.bind(this)\n      }, this.cancelText), options.buttons && options.buttons.map(function (button, index) {\n        if (button.cancel === true && _this4.disableCancel) {\n          return null;\n        }\n\n        var handler = _this4.getCustomButtonHandler(button);\n\n        var text = _this4.getCustomButtonText(button);\n\n        var className = _this4.getCustomButtonClassName(button);\n\n        return _react.default.createElement(_Button.default, {\n          tabIndex: \"0\",\n          className: className,\n          onClick: handler,\n          key: index\n        }, text);\n      }))), _react.default.createElement(\"div\", {\n        className: \"shadow\"\n      }));\n    }\n  }]);\n\n  return ToastrConfirm;\n}(_react.default.Component);\n\nexports.default = ToastrConfirm;\n\n_defineProperty(ToastrConfirm, \"displayName\", 'ToastrConfirm');\n\n_defineProperty(ToastrConfirm, \"propTypes\", {\n  confirm: _propTypes.default.shape({\n    options: _propTypes.default.shape({\n      transitionIn: _propTypes.default.string,\n      transitionOut: _propTypes.default.string\n    })\n  })\n});","map":null,"metadata":{},"sourceType":"script"}