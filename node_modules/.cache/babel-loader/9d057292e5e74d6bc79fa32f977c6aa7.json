{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.endOfRange = endOfRange;\nexports.eventSegments = eventSegments;\nexports.eventLevels = eventLevels;\nexports.inRange = inRange;\nexports.segsOverlap = segsOverlap;\nexports.sortEvents = sortEvents;\n\nvar _findIndex = require('lodash/findIndex');\n\nvar _findIndex2 = _interopRequireDefault(_findIndex);\n\nvar _dates = require('./dates');\n\nvar _dates2 = _interopRequireDefault(_dates);\n\nvar _accessors = require('./accessors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction endOfRange(dateRange) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'day';\n  return {\n    first: dateRange[0],\n    last: _dates2.default.add(dateRange[dateRange.length - 1], 1, unit)\n  };\n}\n\nfunction eventSegments(event, first, last, _ref, range) {\n  var startAccessor = _ref.startAccessor,\n      endAccessor = _ref.endAccessor;\n\n  var slots = _dates2.default.diff(first, last, 'day');\n\n  var start = _dates2.default.max(_dates2.default.startOf((0, _accessors.accessor)(event, startAccessor), 'day'), first);\n\n  var end = _dates2.default.min(_dates2.default.ceil((0, _accessors.accessor)(event, endAccessor), 'day'), last);\n\n  var padding = (0, _findIndex2.default)(range, function (x) {\n    return _dates2.default.eq(x, start, 'day');\n  });\n\n  var span = _dates2.default.diff(start, end, 'day');\n\n  span = Math.min(span, slots);\n  span = Math.max(span, 1);\n  return {\n    event: event,\n    span: span,\n    left: padding + 1,\n    right: Math.max(padding + span, 1)\n  };\n}\n\nfunction eventLevels(rowSegments) {\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  var i = void 0,\n      j = void 0,\n      seg = void 0,\n      levels = [],\n      extra = [];\n\n  for (i = 0; i < rowSegments.length; i++) {\n    seg = rowSegments[i];\n\n    for (j = 0; j < levels.length; j++) {\n      if (!segsOverlap(seg, levels[j])) break;\n    }\n\n    if (j >= limit) {\n      extra.push(seg);\n    } else {\n      ;\n      (levels[j] || (levels[j] = [])).push(seg);\n    }\n  }\n\n  for (i = 0; i < levels.length; i++) {\n    levels[i].sort(function (a, b) {\n      return a.left - b.left;\n    }); //eslint-disable-line\n  }\n\n  return {\n    levels: levels,\n    extra: extra\n  };\n}\n\nfunction inRange(e, start, end, _ref2) {\n  var startAccessor = _ref2.startAccessor,\n      endAccessor = _ref2.endAccessor;\n\n  var eStart = _dates2.default.startOf((0, _accessors.accessor)(e, startAccessor), 'day');\n\n  var eEnd = (0, _accessors.accessor)(e, endAccessor);\n\n  var startsBeforeEnd = _dates2.default.lte(eStart, end, 'day'); // when the event is zero duration we need to handle a bit differently\n\n\n  var endsAfterStart = !_dates2.default.eq(eStart, eEnd, 'minutes') ? _dates2.default.gt(eEnd, start, 'minutes') : _dates2.default.gte(eEnd, start, 'minutes');\n  return startsBeforeEnd && endsAfterStart;\n}\n\nfunction segsOverlap(seg, otherSegs) {\n  return otherSegs.some(function (otherSeg) {\n    return otherSeg.left <= seg.right && otherSeg.right >= seg.left;\n  });\n}\n\nfunction sortEvents(evtA, evtB, _ref3) {\n  var startAccessor = _ref3.startAccessor,\n      endAccessor = _ref3.endAccessor,\n      allDayAccessor = _ref3.allDayAccessor;\n  var startSort = +_dates2.default.startOf((0, _accessors.accessor)(evtA, startAccessor), 'day') - +_dates2.default.startOf((0, _accessors.accessor)(evtB, startAccessor), 'day');\n\n  var durA = _dates2.default.diff((0, _accessors.accessor)(evtA, startAccessor), _dates2.default.ceil((0, _accessors.accessor)(evtA, endAccessor), 'day'), 'day');\n\n  var durB = _dates2.default.diff((0, _accessors.accessor)(evtB, startAccessor), _dates2.default.ceil((0, _accessors.accessor)(evtB, endAccessor), 'day'), 'day');\n\n  return startSort || // sort by start Day first\n  Math.max(durB, 1) - Math.max(durA, 1) || // events spanning multiple days go first\n  !!(0, _accessors.accessor)(evtB, allDayAccessor) - !!(0, _accessors.accessor)(evtA, allDayAccessor) || // then allDay single day events\n  +(0, _accessors.accessor)(evtA, startAccessor) - +(0, _accessors.accessor)(evtB, startAccessor); // then sort by start time\n}","map":null,"metadata":{},"sourceType":"script"}