{"ast":null,"code":"import _objectSpread from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ranaway/Documents/Proyectos/apex-react-drg/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ranaway/Documents/Proyectos/apex-react-drg/src/views/forms/wizard-steps/main.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Promise from \"promise\";\n\nvar StepZilla =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StepZilla, _Component);\n\n  function StepZilla(props) {\n    var _this;\n\n    _classCallCheck(this, StepZilla);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StepZilla).call(this, props));\n    _this.state = _objectSpread({}, _this.getPrevNextBtnState(_this.props.startAtStep), {\n      compState: _this.props.startAtStep,\n      navState: _this.getNavStates(_this.props.startAtStep, _this.props.steps.length)\n    });\n    _this.hidden = {\n      display: \"none\"\n    }; // if user did not give a custom nextTextOnFinalActionStep, the nextButtonText becomes the default\n\n    _this.nextTextOnFinalActionStep = _this.props.nextTextOnFinalActionStep ? _this.props.nextTextOnFinalActionStep : _this.props.nextButtonText;\n\n    _this.applyValidationFlagsToSteps();\n\n    return _this;\n  } // extend the \"steps\" array with flags to indicate if they have been validated\n\n\n  _createClass(StepZilla, [{\n    key: \"applyValidationFlagsToSteps\",\n    value: function applyValidationFlagsToSteps() {\n      var _this2 = this;\n\n      this.props.steps.map(function (i, idx) {\n        if (_this2.props.dontValidate) {\n          i.validated = true;\n        } else {\n          // check if isValidated was exposed in the step, if yes then set initial state as not validated (false) or vice versa\n          // if HOCValidation is used for the step then mark it as \"requires to be validated. i.e. false\"\n          i.validated = typeof i.component.type === \"undefined\" || typeof i.component.type.prototype.isValidated === \"undefined\" && !_this2.isStepAtIndexHOCValidationBased(idx) ? true : false;\n        }\n\n        return i;\n      });\n    } // update the header nav states via classes so they can be styled via css\n\n  }, {\n    key: \"getNavStates\",\n    value: function getNavStates(indx, length) {\n      var styles = [];\n\n      for (var i = 0; i < length; i++) {\n        if (i < indx) {\n          styles.push(\"done\");\n        } else if (i === indx) {\n          styles.push(\"doing\");\n        } else {\n          styles.push(\"todo\");\n        }\n      }\n\n      return {\n        current: indx,\n        styles: styles\n      };\n    }\n  }, {\n    key: \"getPrevNextBtnState\",\n    value: function getPrevNextBtnState(currentStep) {\n      // first set default values\n      var showPreviousBtn = true;\n      var showNextBtn = true;\n      var nextStepText = this.props.nextButtonText; // first step hide previous btn\n\n      if (currentStep === 0) {\n        showPreviousBtn = false;\n      } // second to last step change next btn text if supplied as props\n\n\n      if (currentStep === this.props.steps.length - 1) {\n        nextStepText = this.props.nextTextOnFinalActionStep || nextStepText;\n      } // last step hide next btn, hide previous btn if supplied as props\n\n\n      if (currentStep >= this.props.steps.length - 1) {\n        showNextBtn = false;\n        showPreviousBtn = this.props.prevBtnOnLastStep === false ? false : true;\n      }\n\n      return {\n        showPreviousBtn: showPreviousBtn,\n        showNextBtn: showNextBtn,\n        nextStepText: nextStepText\n      };\n    } // which step are we in?\n\n  }, {\n    key: \"checkNavState\",\n    value: function checkNavState(nextStep) {\n      if (this.props.onStepChange) {\n        this.props.onStepChange(nextStep);\n      }\n\n      this.setState(this.getPrevNextBtnState(nextStep));\n    } // set the nav state\n\n  }, {\n    key: \"setNavState\",\n    value: function setNavState(next) {\n      this.setState({\n        navState: this.getNavStates(next, this.props.steps.length)\n      });\n\n      if (next < this.props.steps.length) {\n        this.setState({\n          compState: next\n        });\n      }\n\n      this.checkNavState(next);\n    } // handles keydown on enter being pressed in any Child component input area. in this case it goes to the next (ignore textareas as they should allow line breaks)\n\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(evt) {\n      if (evt.which === 13) {\n        if (!this.props.preventEnterSubmission && evt.target.type !== \"textarea\") {\n          this.next();\n        } else if (evt.target.type !== \"textarea\") {\n          evt.preventDefault();\n        }\n      }\n    } // this utility method lets Child components invoke a direct jump to another step\n\n  }, {\n    key: \"jumpToStep\",\n    value: function jumpToStep(evt) {\n      var _this3 = this;\n\n      if (typeof evt.target === \"undefined\") {\n        // a child step wants to invoke a jump between steps. in this case 'evt' is the numeric step number and not the JS event\n        this.setNavState(evt);\n      } else {\n        // the main navigation step ui is invoking a jump between steps\n        // if stepsNavigation is turned off or user clicked on existing step again (on step 2 and clicked on 2 again) then ignore\n        if (!this.props.stepsNavigation || evt.target.value === this.state.compState) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          return;\n        } // evt is a react event so we need to persist it as we deal with aync promises which nullifies these events (https://facebook.github.io/react/docs/events.html#event-pooling)\n\n\n        evt.persist();\n        var movingBack = evt.target.value < this.state.compState; // are we trying to move back or front?\n\n        var passThroughStepsNotValid = false; // if we are jumping forward, only allow that if inbetween steps are all validated. This flag informs the logic...\n\n        var proceed = false; // flag on if we should move on\n\n        this.abstractStepMoveAllowedToPromise(movingBack).then(function () {\n          var valid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n          // validation was a success (promise or sync validation). In it was a Promise's resolve()\n          // ... then proceed will be undefined, so make it true. Or else 'proceed' will carry the true/false value from sync\n          proceed = valid;\n\n          if (!movingBack) {\n            _this3.updateStepValidationFlag(proceed);\n          }\n\n          if (proceed) {\n            if (!movingBack) {\n              // looks like we are moving forward, 'reduce' a new array of step>validated values we need to check and\n              // ... 'some' that to get a decision on if we should allow moving forward\n              passThroughStepsNotValid = _this3.props.steps.reduce(function (a, c, i) {\n                if (i >= _this3.state.compState && i < evt.target.value) {\n                  a.push(c.validated);\n                }\n\n                return a;\n              }, []).some(function (c) {\n                return c === false;\n              });\n            }\n          }\n        }).catch(function () {\n          // Promise based validation was a fail (i.e reject())\n          if (!movingBack) {\n            _this3.updateStepValidationFlag(false);\n          }\n        }).then(function () {\n          // this is like finally(), executes if error no no error\n          if (proceed && !passThroughStepsNotValid) {\n            if (evt.target.value === _this3.props.steps.length - 1 && _this3.state.compState === _this3.props.steps.length - 1) {\n              _this3.setNavState(_this3.props.steps.length);\n            } else {\n              _this3.setNavState(evt.target.value);\n            }\n          }\n        }).catch(function (e) {\n          if (e) {\n            // see note below called \"CatchRethrowing\"\n            // ... plus the finally then() above is what throws the JS Error so we need to catch that here specifically\n            setTimeout(function () {\n              throw e;\n            });\n          }\n        });\n      }\n    } // move next via next button\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      var _this4 = this;\n\n      this.abstractStepMoveAllowedToPromise().then(function () {\n        var proceed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        // validation was a success (promise or sync validation). In it was a Promise's resolve() then proceed will be undefined,\n        // ... so make it true. Or else 'proceed' will carry the true/false value from sync validation\n        _this4.updateStepValidationFlag(proceed);\n\n        if (proceed) {\n          _this4.setNavState(_this4.state.compState + 1);\n        }\n      }).catch(function (e) {\n        if (e) {\n          // CatchRethrowing: as we wrap StepMoveAllowed() to resolve as a Promise, the then() is invoked and the next React Component is loaded.\n          // ... during the render, if there are JS errors thrown (e.g. ReferenceError) it gets swallowed by the Promise library and comes in here (catch)\n          // ... so we need to rethrow it outside the execution stack so it behaves like a notmal JS error (i.e. halts and prints to console)\n          //\n          setTimeout(function () {\n            throw e;\n          });\n        } // Promise based validation was a fail (i.e reject())\n\n\n        _this4.updateStepValidationFlag(false);\n      });\n    } // move behind via previous button\n\n  }, {\n    key: \"previous\",\n    value: function previous() {\n      if (this.state.compState > 0) {\n        this.setNavState(this.state.compState - 1);\n      }\n    } // update step's validation flag\n\n  }, {\n    key: \"updateStepValidationFlag\",\n    value: function updateStepValidationFlag() {\n      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.props.steps[this.state.compState].validated = val; // note: if a step component returns 'underfined' then treat as \"true\".\n    } // are we allowed to move forward? via the next button or via jumpToStep?\n\n  }, {\n    key: \"stepMoveAllowed\",\n    value: function stepMoveAllowed() {\n      var skipValidationExecution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var proceed = false;\n\n      if (this.props.dontValidate) {\n        proceed = true;\n      } else {\n        if (skipValidationExecution) {\n          // we are moving backwards in steps, in this case dont validate as it means the user is not commiting to \"save\"\n          proceed = true;\n        } else if (this.isStepAtIndexHOCValidationBased(this.state.compState)) {\n          // the user is using a higer order component (HOC) for validation (e.g react-validation-mixin), this wraps the StepZilla steps as a HOC,\n          // so use hocValidationAppliedTo to determine if this step needs the aync validation as per react-validation-mixin interface\n          proceed = this.refs.activeComponent.refs.component.isValidated();\n        } else if (Object.keys(this.refs).length === 0 || typeof this.refs.activeComponent.isValidated === \"undefined\") {\n          // if its a form component, it should have implemeted a public isValidated class (also pure componenets wont even have refs - i.e. a empty object). If not then continue\n          proceed = true;\n        } else {\n          // user is moving forward in steps, invoke validation as its available\n          proceed = this.refs.activeComponent.isValidated();\n        }\n      }\n\n      return proceed;\n    }\n  }, {\n    key: \"isStepAtIndexHOCValidationBased\",\n    value: function isStepAtIndexHOCValidationBased(stepIndex) {\n      return this.props.hocValidationAppliedTo.length > 0 && this.props.hocValidationAppliedTo.indexOf(stepIndex) > -1;\n    } // a validation method is each step can be sync or async (Promise based), this utility abstracts the wrapper stepMoveAllowed to be Promise driven regardless of validation return type\n\n  }, {\n    key: \"abstractStepMoveAllowedToPromise\",\n    value: function abstractStepMoveAllowedToPromise(movingBack) {\n      return Promise.resolve(this.stepMoveAllowed(movingBack));\n    } // get the classmame of steps\n\n  }, {\n    key: \"getClassName\",\n    value: function getClassName(className, i) {\n      var liClassName = \"\".concat(className, \"-\").concat(this.state.navState.styles[i]); // if step ui based navigation is disabled, then dont highlight step\n\n      if (!this.props.stepsNavigation) {\n        liClassName += \" no-hl\";\n      }\n\n      return liClassName;\n    } // render the steps as stepsNavigation\n\n  }, {\n    key: \"renderSteps\",\n    value: function renderSteps() {\n      var _this5 = this;\n\n      return this.props.steps.map(function (s, i) {\n        return React.createElement(\"li\", {\n          className: _this5.getClassName(\"progtrckr\", i),\n          onClick: function onClick(evt) {\n            _this5.jumpToStep(evt);\n          },\n          key: i,\n          value: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }, React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        }, i + 1), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }, _this5.props.steps[i].name));\n      });\n    } // main render of stepzilla container\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var props = this.props; // clone the step component dynamically and tag it as activeComponent so we can validate it on next. also bind the jumpToStep piping method\n\n      var cloneExtensions = {\n        jumpToStep: function jumpToStep(t) {\n          _this6.jumpToStep(t);\n        }\n      };\n      var componentPointer = this.props.steps[this.state.compState].component; // can only update refs if its a regular React component (not a pure component), so lets check that\n\n      if (componentPointer instanceof Component || // unit test deteceted that instanceof Component can be in either of these locations so test both (not sure why this is the case)\n      componentPointer.type && componentPointer.type.prototype instanceof Component) {\n        cloneExtensions.ref = \"activeComponent\";\n      }\n\n      var compToRender = React.cloneElement(componentPointer, cloneExtensions);\n      return React.createElement(\"div\", {\n        className: \"multi-step\",\n        onKeyDown: function onKeyDown(evt) {\n          _this6.handleKeyDown(evt);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, this.props.showSteps ? React.createElement(\"ol\", {\n        className: \"progtrckr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, this.renderSteps()) : React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }), compToRender, React.createElement(\"div\", {\n        style: this.props.showNavigation ? {} : this.hidden,\n        className: \"footer-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        style: this.state.showPreviousBtn ? {} : this.hidden,\n        className: props.backButtonCls,\n        onClick: function onClick() {\n          _this6.previous();\n        },\n        id: \"prev-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, this.props.backButtonText), React.createElement(\"button\", {\n        style: this.state.showNextBtn ? {} : this.hidden,\n        className: props.nextButtonCls,\n        onClick: function onClick() {\n          _this6.next();\n        },\n        id: \"next-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, this.state.nextStepText)));\n    }\n  }]);\n\n  return StepZilla;\n}(Component);\n\nexport { StepZilla as default };\nStepZilla.defaultProps = {\n  showSteps: true,\n  showNavigation: true,\n  stepsNavigation: true,\n  prevBtnOnLastStep: true,\n  dontValidate: false,\n  preventEnterSubmission: false,\n  startAtStep: 0,\n  nextButtonText: \"Next\",\n  nextButtonCls: \"btn btn-prev btn-primary btn-lg pull-right\",\n  backButtonText: \"Previous\",\n  backButtonCls: \"btn btn-next btn-primary btn-lg pull-left\",\n  hocValidationAppliedTo: []\n};\nStepZilla.propTypes = {\n  steps: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    component: PropTypes.element.isRequired\n  })).isRequired,\n  showSteps: PropTypes.bool,\n  showNavigation: PropTypes.bool,\n  stepsNavigation: PropTypes.bool,\n  prevBtnOnLastStep: PropTypes.bool,\n  dontValidate: PropTypes.bool,\n  preventEnterSubmission: PropTypes.bool,\n  startAtStep: PropTypes.number,\n  nextButtonText: PropTypes.string,\n  nextButtonCls: PropTypes.string,\n  backButtonCls: PropTypes.string,\n  backButtonText: PropTypes.string,\n  hocValidationAppliedTo: PropTypes.array,\n  onStepChange: PropTypes.func\n};","map":{"version":3,"sources":["/Users/ranaway/Documents/Proyectos/apex-react-drg/src/views/forms/wizard-steps/main.js"],"names":["React","Component","PropTypes","Promise","StepZilla","props","state","getPrevNextBtnState","startAtStep","compState","navState","getNavStates","steps","length","hidden","display","nextTextOnFinalActionStep","nextButtonText","applyValidationFlagsToSteps","map","i","idx","dontValidate","validated","component","type","prototype","isValidated","isStepAtIndexHOCValidationBased","indx","styles","push","current","currentStep","showPreviousBtn","showNextBtn","nextStepText","prevBtnOnLastStep","nextStep","onStepChange","setState","next","checkNavState","evt","which","preventEnterSubmission","target","preventDefault","setNavState","stepsNavigation","value","stopPropagation","persist","movingBack","passThroughStepsNotValid","proceed","abstractStepMoveAllowedToPromise","then","valid","updateStepValidationFlag","reduce","a","c","some","catch","e","setTimeout","val","skipValidationExecution","refs","activeComponent","Object","keys","stepIndex","hocValidationAppliedTo","indexOf","resolve","stepMoveAllowed","className","liClassName","s","getClassName","jumpToStep","name","cloneExtensions","t","componentPointer","ref","compToRender","cloneElement","handleKeyDown","showSteps","renderSteps","showNavigation","backButtonCls","previous","backButtonText","nextButtonCls","defaultProps","propTypes","arrayOf","shape","string","isRequired","element","bool","number","array","func"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,SAApB;;IAEqBC,S;;;;;AAClB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAChB,mFAAMA,KAAN;AAEA,UAAKC,KAAL,qBACM,MAAKC,mBAAL,CAAyB,MAAKF,KAAL,CAAWG,WAApC,CADN;AAEGC,MAAAA,SAAS,EAAE,MAAKJ,KAAL,CAAWG,WAFzB;AAGGE,MAAAA,QAAQ,EAAE,MAAKC,YAAL,CAAkB,MAAKN,KAAL,CAAWG,WAA7B,EAA0C,MAAKH,KAAL,CAAWO,KAAX,CAAiBC,MAA3D;AAHb;AAMA,UAAKC,MAAL,GAAc;AACXC,MAAAA,OAAO,EAAE;AADE,KAAd,CATgB,CAahB;;AACA,UAAKC,yBAAL,GAAiC,MAAKX,KAAL,CAAWW,yBAAX,GAAuC,MAAKX,KAAL,CAAWW,yBAAlD,GAA8E,MAAKX,KAAL,CAAWY,cAA1H;;AAEA,UAAKC,2BAAL;;AAhBgB;AAiBlB,G,CAED;;;;;kDAC8B;AAAA;;AAC3B,WAAKb,KAAL,CAAWO,KAAX,CAAiBO,GAAjB,CAAqB,UAACC,CAAD,EAAIC,GAAJ,EAAY;AAC9B,YAAI,MAAI,CAAChB,KAAL,CAAWiB,YAAf,EAA6B;AAC1BF,UAAAA,CAAC,CAACG,SAAF,GAAc,IAAd;AACF,SAFD,MAEO;AACJ;AACA;AACAH,UAAAA,CAAC,CAACG,SAAF,GAAc,OAAOH,CAAC,CAACI,SAAF,CAAYC,IAAnB,KAA4B,WAA5B,IAA4C,OAAOL,CAAC,CAACI,SAAF,CAAYC,IAAZ,CAAiBC,SAAjB,CAA2BC,WAAlC,KAAkD,WAAlD,IAAiE,CAAC,MAAI,CAACC,+BAAL,CAAqCP,GAArC,CAA9G,GAA2J,IAA3J,GAAkK,KAAhL;AACF;;AAED,eAAOD,CAAP;AACF,OAVD;AAWF,K,CAED;;;;iCACaS,I,EAAMhB,M,EAAQ;AACxB,UAAMiB,MAAM,GAAG,EAAf;;AAEA,WAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAApB,EAA4BO,CAAC,EAA7B,EAAiC;AAC9B,YAAIA,CAAC,GAAGS,IAAR,EAAc;AACXC,UAAAA,MAAM,CAACC,IAAP,CAAY,MAAZ;AACF,SAFD,MAEO,IAAIX,CAAC,KAAKS,IAAV,EAAgB;AACpBC,UAAAA,MAAM,CAACC,IAAP,CAAY,OAAZ;AACF,SAFM,MAEA;AACJD,UAAAA,MAAM,CAACC,IAAP,CAAY,MAAZ;AACF;AACH;;AAED,aAAO;AAAEC,QAAAA,OAAO,EAAEH,IAAX;AAAiBC,QAAAA,MAAM,EAANA;AAAjB,OAAP;AACF;;;wCAEmBG,W,EAAa;AAC9B;AACA,UAAIC,eAAe,GAAG,IAAtB;AACA,UAAIC,WAAW,GAAG,IAAlB;AACA,UAAIC,YAAY,GAAG,KAAK/B,KAAL,CAAWY,cAA9B,CAJ8B,CAM9B;;AACA,UAAIgB,WAAW,KAAK,CAApB,EAAuB;AACpBC,QAAAA,eAAe,GAAG,KAAlB;AACF,OAT6B,CAW9B;;;AACA,UAAID,WAAW,KAAK,KAAK5B,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,GAA0B,CAA9C,EAAiD;AAC9CuB,QAAAA,YAAY,GAAG,KAAK/B,KAAL,CAAWW,yBAAX,IAAwCoB,YAAvD;AACF,OAd6B,CAgB9B;;;AACA,UAAIH,WAAW,IAAI,KAAK5B,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,GAA0B,CAA7C,EAAgD;AAC7CsB,QAAAA,WAAW,GAAG,KAAd;AACAD,QAAAA,eAAe,GAAG,KAAK7B,KAAL,CAAWgC,iBAAX,KAAiC,KAAjC,GAAyC,KAAzC,GAAiD,IAAnE;AACF;;AAED,aAAO;AACJH,QAAAA,eAAe,EAAfA,eADI;AAEJC,QAAAA,WAAW,EAAXA,WAFI;AAGJC,QAAAA,YAAY,EAAZA;AAHI,OAAP;AAKF,K,CAED;;;;kCACcE,Q,EAAU;AACrB,UAAI,KAAKjC,KAAL,CAAWkC,YAAf,EAA6B;AAC1B,aAAKlC,KAAL,CAAWkC,YAAX,CAAwBD,QAAxB;AACF;;AAED,WAAKE,QAAL,CAAc,KAAKjC,mBAAL,CAAyB+B,QAAzB,CAAd;AACF,K,CAED;;;;gCACYG,I,EAAM;AACf,WAAKD,QAAL,CAAc;AAAE9B,QAAAA,QAAQ,EAAE,KAAKC,YAAL,CAAkB8B,IAAlB,EAAwB,KAAKpC,KAAL,CAAWO,KAAX,CAAiBC,MAAzC;AAAZ,OAAd;;AAEA,UAAI4B,IAAI,GAAG,KAAKpC,KAAL,CAAWO,KAAX,CAAiBC,MAA5B,EAAoC;AACjC,aAAK2B,QAAL,CAAc;AAAE/B,UAAAA,SAAS,EAAEgC;AAAb,SAAd;AACF;;AAED,WAAKC,aAAL,CAAmBD,IAAnB;AACF,K,CAED;;;;kCACcE,G,EAAK;AAChB,UAAIA,GAAG,CAACC,KAAJ,KAAc,EAAlB,EAAsB;AACnB,YAAI,CAAC,KAAKvC,KAAL,CAAWwC,sBAAZ,IAAsCF,GAAG,CAACG,MAAJ,CAAWrB,IAAX,KAAoB,UAA9D,EAA0E;AACvE,eAAKgB,IAAL;AACF,SAFD,MAEO,IAAIE,GAAG,CAACG,MAAJ,CAAWrB,IAAX,KAAoB,UAAxB,EAAoC;AACxCkB,UAAAA,GAAG,CAACI,cAAJ;AACF;AACH;AACH,K,CAED;;;;+BACWJ,G,EAAK;AAAA;;AACb,UAAI,OAAOA,GAAG,CAACG,MAAX,KAAsB,WAA1B,EAAuC;AACpC;AACA,aAAKE,WAAL,CAAiBL,GAAjB;AACF,OAHD,MAGO;AACJ;AACA;AACA,YAAI,CAAC,KAAKtC,KAAL,CAAW4C,eAAZ,IAA+BN,GAAG,CAACG,MAAJ,CAAWI,KAAX,KAAqB,KAAK5C,KAAL,CAAWG,SAAnE,EAA8E;AAC3EkC,UAAAA,GAAG,CAACI,cAAJ;AACAJ,UAAAA,GAAG,CAACQ,eAAJ;AAEA;AACF,SARG,CAUJ;;;AACAR,QAAAA,GAAG,CAACS,OAAJ;AAEA,YAAMC,UAAU,GAAGV,GAAG,CAACG,MAAJ,CAAWI,KAAX,GAAmB,KAAK5C,KAAL,CAAWG,SAAjD,CAbI,CAawD;;AAC5D,YAAI6C,wBAAwB,GAAG,KAA/B,CAdI,CAckC;;AACtC,YAAIC,OAAO,GAAG,KAAd,CAfI,CAeiB;;AAErB,aAAKC,gCAAL,CAAsCH,UAAtC,EACII,IADJ,CACS,YAAkB;AAAA,cAAjBC,KAAiB,uEAAT,IAAS;AACrB;AACA;AACAH,UAAAA,OAAO,GAAGG,KAAV;;AAEA,cAAI,CAACL,UAAL,EAAiB;AACd,YAAA,MAAI,CAACM,wBAAL,CAA8BJ,OAA9B;AACF;;AAED,cAAIA,OAAJ,EAAa;AACV,gBAAI,CAACF,UAAL,EAAiB;AACd;AACA;AACAC,cAAAA,wBAAwB,GAAG,MAAI,CAACjD,KAAL,CAAWO,KAAX,CACvBgD,MADuB,CAChB,UAACC,CAAD,EAAIC,CAAJ,EAAO1C,CAAP,EAAa;AAClB,oBAAIA,CAAC,IAAI,MAAI,CAACd,KAAL,CAAWG,SAAhB,IAA6BW,CAAC,GAAGuB,GAAG,CAACG,MAAJ,CAAWI,KAAhD,EAAuD;AACpDW,kBAAAA,CAAC,CAAC9B,IAAF,CAAO+B,CAAC,CAACvC,SAAT;AACF;;AACD,uBAAOsC,CAAP;AACF,eANuB,EAMrB,EANqB,EAOvBE,IAPuB,CAOlB,UAAAD,CAAC,EAAI;AACR,uBAAOA,CAAC,KAAK,KAAb;AACF,eATuB,CAA3B;AAUF;AACH;AACH,SA1BJ,EA2BIE,KA3BJ,CA2BU,YAAM;AACV;AACA,cAAI,CAACX,UAAL,EAAiB;AACd,YAAA,MAAI,CAACM,wBAAL,CAA8B,KAA9B;AACF;AACH,SAhCJ,EAiCIF,IAjCJ,CAiCS,YAAM;AACT;AACA,cAAIF,OAAO,IAAI,CAACD,wBAAhB,EAA0C;AACvC,gBAAIX,GAAG,CAACG,MAAJ,CAAWI,KAAX,KAAqB,MAAI,CAAC7C,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,GAA0B,CAA/C,IAAoD,MAAI,CAACP,KAAL,CAAWG,SAAX,KAAyB,MAAI,CAACJ,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,GAA0B,CAA3G,EAA8G;AAC3G,cAAA,MAAI,CAACmC,WAAL,CAAiB,MAAI,CAAC3C,KAAL,CAAWO,KAAX,CAAiBC,MAAlC;AACF,aAFD,MAEO;AACJ,cAAA,MAAI,CAACmC,WAAL,CAAiBL,GAAG,CAACG,MAAJ,CAAWI,KAA5B;AACF;AACH;AACH,SA1CJ,EA2CIc,KA3CJ,CA2CU,UAAAC,CAAC,EAAI;AACT,cAAIA,CAAJ,EAAO;AACJ;AACA;AACAC,YAAAA,UAAU,CAAC,YAAM;AACd,oBAAMD,CAAN;AACF,aAFS,CAAV;AAGF;AACH,SAnDJ;AAoDF;AACH,K,CAED;;;;2BACO;AAAA;;AACJ,WAAKT,gCAAL,GACIC,IADJ,CACS,YAAoB;AAAA,YAAnBF,OAAmB,uEAAT,IAAS;;AACvB;AACA;AACA,QAAA,MAAI,CAACI,wBAAL,CAA8BJ,OAA9B;;AAEA,YAAIA,OAAJ,EAAa;AACV,UAAA,MAAI,CAACP,WAAL,CAAiB,MAAI,CAAC1C,KAAL,CAAWG,SAAX,GAAuB,CAAxC;AACF;AACH,OATJ,EAUIuD,KAVJ,CAUU,UAAAC,CAAC,EAAI;AACT,YAAIA,CAAJ,EAAO;AACJ;AACA;AACA;AACA;AACAC,UAAAA,UAAU,CAAC,YAAM;AACd,kBAAMD,CAAN;AACF,WAFS,CAAV;AAGF,SATQ,CAWT;;;AACA,QAAA,MAAI,CAACN,wBAAL,CAA8B,KAA9B;AACF,OAvBJ;AAwBF,K,CAED;;;;+BACW;AACR,UAAI,KAAKrD,KAAL,CAAWG,SAAX,GAAuB,CAA3B,EAA8B;AAC3B,aAAKuC,WAAL,CAAiB,KAAK1C,KAAL,CAAWG,SAAX,GAAuB,CAAxC;AACF;AACH,K,CAED;;;;+CACqC;AAAA,UAAZ0D,GAAY,uEAAN,IAAM;AAClC,WAAK9D,KAAL,CAAWO,KAAX,CAAiB,KAAKN,KAAL,CAAWG,SAA5B,EAAuCc,SAAvC,GAAmD4C,GAAnD,CADkC,CACsB;AAC1D,K,CAED;;;;sCACiD;AAAA,UAAjCC,uBAAiC,uEAAP,KAAO;AAC9C,UAAIb,OAAO,GAAG,KAAd;;AAEA,UAAI,KAAKlD,KAAL,CAAWiB,YAAf,EAA6B;AAC1BiC,QAAAA,OAAO,GAAG,IAAV;AACF,OAFD,MAEO;AACJ,YAAIa,uBAAJ,EAA6B;AAC1B;AACAb,UAAAA,OAAO,GAAG,IAAV;AACF,SAHD,MAGO,IAAI,KAAK3B,+BAAL,CAAqC,KAAKtB,KAAL,CAAWG,SAAhD,CAAJ,EAAgE;AACpE;AACA;AACA8C,UAAAA,OAAO,GAAG,KAAKc,IAAL,CAAUC,eAAV,CAA0BD,IAA1B,CAA+B7C,SAA/B,CAAyCG,WAAzC,EAAV;AACF,SAJM,MAIA,IAAI4C,MAAM,CAACC,IAAP,CAAY,KAAKH,IAAjB,EAAuBxD,MAAvB,KAAkC,CAAlC,IAAuC,OAAO,KAAKwD,IAAL,CAAUC,eAAV,CAA0B3C,WAAjC,KAAiD,WAA5F,EAAyG;AAC7G;AACA4B,UAAAA,OAAO,GAAG,IAAV;AACF,SAHM,MAGA;AACJ;AACAA,UAAAA,OAAO,GAAG,KAAKc,IAAL,CAAUC,eAAV,CAA0B3C,WAA1B,EAAV;AACF;AACH;;AAED,aAAO4B,OAAP;AACF;;;oDAE+BkB,S,EAAW;AACxC,aAAO,KAAKpE,KAAL,CAAWqE,sBAAX,CAAkC7D,MAAlC,GAA2C,CAA3C,IAAgD,KAAKR,KAAL,CAAWqE,sBAAX,CAAkCC,OAAlC,CAA0CF,SAA1C,IAAuD,CAAC,CAA/G;AACF,K,CAED;;;;qDACiCpB,U,EAAY;AAC1C,aAAOlD,OAAO,CAACyE,OAAR,CAAgB,KAAKC,eAAL,CAAqBxB,UAArB,CAAhB,CAAP;AACF,K,CAED;;;;iCACayB,S,EAAW1D,C,EAAG;AACxB,UAAI2D,WAAW,aAAMD,SAAN,cAAmB,KAAKxE,KAAL,CAAWI,QAAX,CAAoBoB,MAApB,CAA2BV,CAA3B,CAAnB,CAAf,CADwB,CAGxB;;AACA,UAAI,CAAC,KAAKf,KAAL,CAAW4C,eAAhB,EAAiC;AAC9B8B,QAAAA,WAAW,IAAI,QAAf;AACF;;AAED,aAAOA,WAAP;AACF,K,CAED;;;;kCACc;AAAA;;AACX,aAAO,KAAK1E,KAAL,CAAWO,KAAX,CAAiBO,GAAjB,CAAqB,UAAC6D,CAAD,EAAI5D,CAAJ;AAAA,eACzB;AACG,UAAA,SAAS,EAAE,MAAI,CAAC6D,YAAL,CAAkB,WAAlB,EAA+B7D,CAA/B,CADd;AAEG,UAAA,OAAO,EAAE,iBAAAuB,GAAG,EAAI;AACb,YAAA,MAAI,CAACuC,UAAL,CAAgBvC,GAAhB;AACF,WAJJ;AAKG,UAAA,GAAG,EAAEvB,CALR;AAMG,UAAA,KAAK,EAAEA,CANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,CAAC,GAAG,CAAT,CARH,EASG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO,MAAI,CAACf,KAAL,CAAWO,KAAX,CAAiBQ,CAAjB,EAAoB+D,IAA3B,CATH,CADyB;AAAA,OAArB,CAAP;AAaF,K,CAED;;;;6BACS;AAAA;;AAAA,UACE9E,KADF,GACY,IADZ,CACEA,KADF,EAGN;;AACA,UAAM+E,eAAe,GAAG;AACrBF,QAAAA,UAAU,EAAE,oBAAAG,CAAC,EAAI;AACd,UAAA,MAAI,CAACH,UAAL,CAAgBG,CAAhB;AACF;AAHoB,OAAxB;AAMA,UAAMC,gBAAgB,GAAG,KAAKjF,KAAL,CAAWO,KAAX,CAAiB,KAAKN,KAAL,CAAWG,SAA5B,EAAuCe,SAAhE,CAVM,CAYN;;AACA,UACG8D,gBAAgB,YAAYrF,SAA5B,IAAyC;AACxCqF,MAAAA,gBAAgB,CAAC7D,IAAjB,IAAyB6D,gBAAgB,CAAC7D,IAAjB,CAAsBC,SAAtB,YAA2CzB,SAFxE,EAGE;AACCmF,QAAAA,eAAe,CAACG,GAAhB,GAAsB,iBAAtB;AACF;;AAED,UAAMC,YAAY,GAAGxF,KAAK,CAACyF,YAAN,CAAmBH,gBAAnB,EAAqCF,eAArC,CAArB;AAEA,aACG;AACG,QAAA,SAAS,EAAC,YADb;AAEG,QAAA,SAAS,EAAE,mBAAAzC,GAAG,EAAI;AACf,UAAA,MAAI,CAAC+C,aAAL,CAAmB/C,GAAnB;AACF,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,KAAKtC,KAAL,CAAWsF,SAAX,GAAuB;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2B,KAAKC,WAAL,EAA3B,CAAvB,GAA6E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANjF,EAQIJ,YARJ,EASG;AAAK,QAAA,KAAK,EAAE,KAAKnF,KAAL,CAAWwF,cAAX,GAA4B,EAA5B,GAAiC,KAAK/E,MAAlD;AAA0D,QAAA,SAAS,EAAC,gBAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AACG,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAW4B,eAAX,GAA6B,EAA7B,GAAkC,KAAKpB,MADjD;AAEG,QAAA,SAAS,EAAET,KAAK,CAACyF,aAFpB;AAGG,QAAA,OAAO,EAAE,mBAAM;AACZ,UAAA,MAAI,CAACC,QAAL;AACF,SALJ;AAMG,QAAA,EAAE,EAAC,aANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI,KAAK1F,KAAL,CAAW2F,cARf,CADH,EAWG;AACG,QAAA,KAAK,EAAE,KAAK1F,KAAL,CAAW6B,WAAX,GAAyB,EAAzB,GAA8B,KAAKrB,MAD7C;AAEG,QAAA,SAAS,EAAET,KAAK,CAAC4F,aAFpB;AAGG,QAAA,OAAO,EAAE,mBAAM;AACZ,UAAA,MAAI,CAACxD,IAAL;AACF,SALJ;AAMG,QAAA,EAAE,EAAC,aANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI,KAAKnC,KAAL,CAAW8B,YARf,CAXH,CATH,CADH;AAkCF;;;;EA9VmCnC,S;;SAAlBG,S;AAiWrBA,SAAS,CAAC8F,YAAV,GAAyB;AACtBP,EAAAA,SAAS,EAAE,IADW;AAEtBE,EAAAA,cAAc,EAAE,IAFM;AAGtB5C,EAAAA,eAAe,EAAE,IAHK;AAItBZ,EAAAA,iBAAiB,EAAE,IAJG;AAKtBf,EAAAA,YAAY,EAAE,KALQ;AAMtBuB,EAAAA,sBAAsB,EAAE,KANF;AAOtBrC,EAAAA,WAAW,EAAE,CAPS;AAQtBS,EAAAA,cAAc,EAAE,MARM;AAStBgF,EAAAA,aAAa,EAAE,4CATO;AAUtBD,EAAAA,cAAc,EAAE,UAVM;AAWtBF,EAAAA,aAAa,EAAE,2CAXO;AAYtBpB,EAAAA,sBAAsB,EAAE;AAZF,CAAzB;AAeAtE,SAAS,CAAC+F,SAAV,GAAsB;AACnBvF,EAAAA,KAAK,EAAEV,SAAS,CAACkG,OAAV,CACJlG,SAAS,CAACmG,KAAV,CAAgB;AACblB,IAAAA,IAAI,EAAEjF,SAAS,CAACoG,MAAV,CAAiBC,UADV;AAEb/E,IAAAA,SAAS,EAAEtB,SAAS,CAACsG,OAAV,CAAkBD;AAFhB,GAAhB,CADI,EAKLA,UANiB;AAOnBZ,EAAAA,SAAS,EAAEzF,SAAS,CAACuG,IAPF;AAQnBZ,EAAAA,cAAc,EAAE3F,SAAS,CAACuG,IARP;AASnBxD,EAAAA,eAAe,EAAE/C,SAAS,CAACuG,IATR;AAUnBpE,EAAAA,iBAAiB,EAAEnC,SAAS,CAACuG,IAVV;AAWnBnF,EAAAA,YAAY,EAAEpB,SAAS,CAACuG,IAXL;AAYnB5D,EAAAA,sBAAsB,EAAE3C,SAAS,CAACuG,IAZf;AAanBjG,EAAAA,WAAW,EAAEN,SAAS,CAACwG,MAbJ;AAcnBzF,EAAAA,cAAc,EAAEf,SAAS,CAACoG,MAdP;AAenBL,EAAAA,aAAa,EAAE/F,SAAS,CAACoG,MAfN;AAgBnBR,EAAAA,aAAa,EAAE5F,SAAS,CAACoG,MAhBN;AAiBnBN,EAAAA,cAAc,EAAE9F,SAAS,CAACoG,MAjBP;AAkBnB5B,EAAAA,sBAAsB,EAAExE,SAAS,CAACyG,KAlBf;AAmBnBpE,EAAAA,YAAY,EAAErC,SAAS,CAAC0G;AAnBL,CAAtB","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Promise from \"promise\";\n\nexport default class StepZilla extends Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         ...this.getPrevNextBtnState(this.props.startAtStep),\n         compState: this.props.startAtStep,\n         navState: this.getNavStates(this.props.startAtStep, this.props.steps.length)\n      };\n\n      this.hidden = {\n         display: \"none\"\n      };\n\n      // if user did not give a custom nextTextOnFinalActionStep, the nextButtonText becomes the default\n      this.nextTextOnFinalActionStep = this.props.nextTextOnFinalActionStep ? this.props.nextTextOnFinalActionStep : this.props.nextButtonText;\n\n      this.applyValidationFlagsToSteps();\n   }\n\n   // extend the \"steps\" array with flags to indicate if they have been validated\n   applyValidationFlagsToSteps() {\n      this.props.steps.map((i, idx) => {\n         if (this.props.dontValidate) {\n            i.validated = true;\n         } else {\n            // check if isValidated was exposed in the step, if yes then set initial state as not validated (false) or vice versa\n            // if HOCValidation is used for the step then mark it as \"requires to be validated. i.e. false\"\n            i.validated = typeof i.component.type === \"undefined\" || (typeof i.component.type.prototype.isValidated === \"undefined\" && !this.isStepAtIndexHOCValidationBased(idx)) ? true : false;\n         }\n\n         return i;\n      });\n   }\n\n   // update the header nav states via classes so they can be styled via css\n   getNavStates(indx, length) {\n      const styles = [];\n\n      for (let i = 0; i < length; i++) {\n         if (i < indx) {\n            styles.push(\"done\");\n         } else if (i === indx) {\n            styles.push(\"doing\");\n         } else {\n            styles.push(\"todo\");\n         }\n      }\n\n      return { current: indx, styles };\n   }\n\n   getPrevNextBtnState(currentStep) {\n      // first set default values\n      let showPreviousBtn = true;\n      let showNextBtn = true;\n      let nextStepText = this.props.nextButtonText;\n\n      // first step hide previous btn\n      if (currentStep === 0) {\n         showPreviousBtn = false;\n      }\n\n      // second to last step change next btn text if supplied as props\n      if (currentStep === this.props.steps.length - 1) {\n         nextStepText = this.props.nextTextOnFinalActionStep || nextStepText;\n      }\n\n      // last step hide next btn, hide previous btn if supplied as props\n      if (currentStep >= this.props.steps.length - 1) {\n         showNextBtn = false;\n         showPreviousBtn = this.props.prevBtnOnLastStep === false ? false : true;\n      }\n\n      return {\n         showPreviousBtn,\n         showNextBtn,\n         nextStepText\n      };\n   }\n\n   // which step are we in?\n   checkNavState(nextStep) {\n      if (this.props.onStepChange) {\n         this.props.onStepChange(nextStep);\n      }\n\n      this.setState(this.getPrevNextBtnState(nextStep));\n   }\n\n   // set the nav state\n   setNavState(next) {\n      this.setState({ navState: this.getNavStates(next, this.props.steps.length) });\n\n      if (next < this.props.steps.length) {\n         this.setState({ compState: next });\n      }\n\n      this.checkNavState(next);\n   }\n\n   // handles keydown on enter being pressed in any Child component input area. in this case it goes to the next (ignore textareas as they should allow line breaks)\n   handleKeyDown(evt) {\n      if (evt.which === 13) {\n         if (!this.props.preventEnterSubmission && evt.target.type !== \"textarea\") {\n            this.next();\n         } else if (evt.target.type !== \"textarea\") {\n            evt.preventDefault();\n         }\n      }\n   }\n\n   // this utility method lets Child components invoke a direct jump to another step\n   jumpToStep(evt) {\n      if (typeof evt.target === \"undefined\") {\n         // a child step wants to invoke a jump between steps. in this case 'evt' is the numeric step number and not the JS event\n         this.setNavState(evt);\n      } else {\n         // the main navigation step ui is invoking a jump between steps\n         // if stepsNavigation is turned off or user clicked on existing step again (on step 2 and clicked on 2 again) then ignore\n         if (!this.props.stepsNavigation || evt.target.value === this.state.compState) {\n            evt.preventDefault();\n            evt.stopPropagation();\n\n            return;\n         }\n\n         // evt is a react event so we need to persist it as we deal with aync promises which nullifies these events (https://facebook.github.io/react/docs/events.html#event-pooling)\n         evt.persist();\n\n         const movingBack = evt.target.value < this.state.compState; // are we trying to move back or front?\n         let passThroughStepsNotValid = false; // if we are jumping forward, only allow that if inbetween steps are all validated. This flag informs the logic...\n         let proceed = false; // flag on if we should move on\n\n         this.abstractStepMoveAllowedToPromise(movingBack)\n            .then((valid = true) => {\n               // validation was a success (promise or sync validation). In it was a Promise's resolve()\n               // ... then proceed will be undefined, so make it true. Or else 'proceed' will carry the true/false value from sync\n               proceed = valid;\n\n               if (!movingBack) {\n                  this.updateStepValidationFlag(proceed);\n               }\n\n               if (proceed) {\n                  if (!movingBack) {\n                     // looks like we are moving forward, 'reduce' a new array of step>validated values we need to check and\n                     // ... 'some' that to get a decision on if we should allow moving forward\n                     passThroughStepsNotValid = this.props.steps\n                        .reduce((a, c, i) => {\n                           if (i >= this.state.compState && i < evt.target.value) {\n                              a.push(c.validated);\n                           }\n                           return a;\n                        }, [])\n                        .some(c => {\n                           return c === false;\n                        });\n                  }\n               }\n            })\n            .catch(() => {\n               // Promise based validation was a fail (i.e reject())\n               if (!movingBack) {\n                  this.updateStepValidationFlag(false);\n               }\n            })\n            .then(() => {\n               // this is like finally(), executes if error no no error\n               if (proceed && !passThroughStepsNotValid) {\n                  if (evt.target.value === this.props.steps.length - 1 && this.state.compState === this.props.steps.length - 1) {\n                     this.setNavState(this.props.steps.length);\n                  } else {\n                     this.setNavState(evt.target.value);\n                  }\n               }\n            })\n            .catch(e => {\n               if (e) {\n                  // see note below called \"CatchRethrowing\"\n                  // ... plus the finally then() above is what throws the JS Error so we need to catch that here specifically\n                  setTimeout(() => {\n                     throw e;\n                  });\n               }\n            });\n      }\n   }\n\n   // move next via next button\n   next() {\n      this.abstractStepMoveAllowedToPromise()\n         .then((proceed = true) => {\n            // validation was a success (promise or sync validation). In it was a Promise's resolve() then proceed will be undefined,\n            // ... so make it true. Or else 'proceed' will carry the true/false value from sync validation\n            this.updateStepValidationFlag(proceed);\n\n            if (proceed) {\n               this.setNavState(this.state.compState + 1);\n            }\n         })\n         .catch(e => {\n            if (e) {\n               // CatchRethrowing: as we wrap StepMoveAllowed() to resolve as a Promise, the then() is invoked and the next React Component is loaded.\n               // ... during the render, if there are JS errors thrown (e.g. ReferenceError) it gets swallowed by the Promise library and comes in here (catch)\n               // ... so we need to rethrow it outside the execution stack so it behaves like a notmal JS error (i.e. halts and prints to console)\n               //\n               setTimeout(() => {\n                  throw e;\n               });\n            }\n\n            // Promise based validation was a fail (i.e reject())\n            this.updateStepValidationFlag(false);\n         });\n   }\n\n   // move behind via previous button\n   previous() {\n      if (this.state.compState > 0) {\n         this.setNavState(this.state.compState - 1);\n      }\n   }\n\n   // update step's validation flag\n   updateStepValidationFlag(val = true) {\n      this.props.steps[this.state.compState].validated = val; // note: if a step component returns 'underfined' then treat as \"true\".\n   }\n\n   // are we allowed to move forward? via the next button or via jumpToStep?\n   stepMoveAllowed(skipValidationExecution = false) {\n      let proceed = false;\n\n      if (this.props.dontValidate) {\n         proceed = true;\n      } else {\n         if (skipValidationExecution) {\n            // we are moving backwards in steps, in this case dont validate as it means the user is not commiting to \"save\"\n            proceed = true;\n         } else if (this.isStepAtIndexHOCValidationBased(this.state.compState)) {\n            // the user is using a higer order component (HOC) for validation (e.g react-validation-mixin), this wraps the StepZilla steps as a HOC,\n            // so use hocValidationAppliedTo to determine if this step needs the aync validation as per react-validation-mixin interface\n            proceed = this.refs.activeComponent.refs.component.isValidated();\n         } else if (Object.keys(this.refs).length === 0 || typeof this.refs.activeComponent.isValidated === \"undefined\") {\n            // if its a form component, it should have implemeted a public isValidated class (also pure componenets wont even have refs - i.e. a empty object). If not then continue\n            proceed = true;\n         } else {\n            // user is moving forward in steps, invoke validation as its available\n            proceed = this.refs.activeComponent.isValidated();\n         }\n      }\n\n      return proceed;\n   }\n\n   isStepAtIndexHOCValidationBased(stepIndex) {\n      return this.props.hocValidationAppliedTo.length > 0 && this.props.hocValidationAppliedTo.indexOf(stepIndex) > -1;\n   }\n\n   // a validation method is each step can be sync or async (Promise based), this utility abstracts the wrapper stepMoveAllowed to be Promise driven regardless of validation return type\n   abstractStepMoveAllowedToPromise(movingBack) {\n      return Promise.resolve(this.stepMoveAllowed(movingBack));\n   }\n\n   // get the classmame of steps\n   getClassName(className, i) {\n      let liClassName = `${className}-${this.state.navState.styles[i]}`;\n\n      // if step ui based navigation is disabled, then dont highlight step\n      if (!this.props.stepsNavigation) {\n         liClassName += \" no-hl\";\n      }\n\n      return liClassName;\n   }\n\n   // render the steps as stepsNavigation\n   renderSteps() {\n      return this.props.steps.map((s, i) => (\n         <li\n            className={this.getClassName(\"progtrckr\", i)}\n            onClick={evt => {\n               this.jumpToStep(evt);\n            }}\n            key={i}\n            value={i}\n         >\n            <em>{i + 1}</em>\n            <span>{this.props.steps[i].name}</span>\n         </li>\n      ));\n   }\n\n   // main render of stepzilla container\n   render() {\n      const { props } = this;\n\n      // clone the step component dynamically and tag it as activeComponent so we can validate it on next. also bind the jumpToStep piping method\n      const cloneExtensions = {\n         jumpToStep: t => {\n            this.jumpToStep(t);\n         }\n      };\n\n      const componentPointer = this.props.steps[this.state.compState].component;\n\n      // can only update refs if its a regular React component (not a pure component), so lets check that\n      if (\n         componentPointer instanceof Component || // unit test deteceted that instanceof Component can be in either of these locations so test both (not sure why this is the case)\n         (componentPointer.type && componentPointer.type.prototype instanceof Component)\n      ) {\n         cloneExtensions.ref = \"activeComponent\";\n      }\n\n      const compToRender = React.cloneElement(componentPointer, cloneExtensions);\n\n      return (\n         <div\n            className=\"multi-step\"\n            onKeyDown={evt => {\n               this.handleKeyDown(evt);\n            }}\n         >\n            {this.props.showSteps ? <ol className=\"progtrckr\">{this.renderSteps()}</ol> : <span />}\n\n            {compToRender}\n            <div style={this.props.showNavigation ? {} : this.hidden} className=\"footer-buttons\">\n               <button\n                  style={this.state.showPreviousBtn ? {} : this.hidden}\n                  className={props.backButtonCls}\n                  onClick={() => {\n                     this.previous();\n                  }}\n                  id=\"prev-button\"\n               >\n                  {this.props.backButtonText}\n               </button>\n               <button\n                  style={this.state.showNextBtn ? {} : this.hidden}\n                  className={props.nextButtonCls}\n                  onClick={() => {\n                     this.next();\n                  }}\n                  id=\"next-button\"\n               >\n                  {this.state.nextStepText}\n               </button>\n            </div>\n         </div>\n      );\n   }\n}\n\nStepZilla.defaultProps = {\n   showSteps: true,\n   showNavigation: true,\n   stepsNavigation: true,\n   prevBtnOnLastStep: true,\n   dontValidate: false,\n   preventEnterSubmission: false,\n   startAtStep: 0,\n   nextButtonText: \"Next\",\n   nextButtonCls: \"btn btn-prev btn-primary btn-lg pull-right\",\n   backButtonText: \"Previous\",\n   backButtonCls: \"btn btn-next btn-primary btn-lg pull-left\",\n   hocValidationAppliedTo: []\n};\n\nStepZilla.propTypes = {\n   steps: PropTypes.arrayOf(\n      PropTypes.shape({\n         name: PropTypes.string.isRequired,\n         component: PropTypes.element.isRequired\n      })\n   ).isRequired,\n   showSteps: PropTypes.bool,\n   showNavigation: PropTypes.bool,\n   stepsNavigation: PropTypes.bool,\n   prevBtnOnLastStep: PropTypes.bool,\n   dontValidate: PropTypes.bool,\n   preventEnterSubmission: PropTypes.bool,\n   startAtStep: PropTypes.number,\n   nextButtonText: PropTypes.string,\n   nextButtonCls: PropTypes.string,\n   backButtonCls: PropTypes.string,\n   backButtonText: PropTypes.string,\n   hocValidationAppliedTo: PropTypes.array,\n   onStepChange: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}