{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _uncontrollable = require('uncontrollable');\n\nvar _uncontrollable2 = _interopRequireDefault(_uncontrollable);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes3 = require('./utils/propTypes');\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _helpers = require('./utils/helpers');\n\nvar _constants = require('./utils/constants');\n\nvar _formats = require('./formats');\n\nvar _formats2 = _interopRequireDefault(_formats);\n\nvar _messages = require('./utils/messages');\n\nvar _messages2 = _interopRequireDefault(_messages);\n\nvar _move = require('./utils/move');\n\nvar _move2 = _interopRequireDefault(_move);\n\nvar _Views = require('./Views');\n\nvar _Views2 = _interopRequireDefault(_Views);\n\nvar _Toolbar = require('./Toolbar');\n\nvar _Toolbar2 = _interopRequireDefault(_Toolbar);\n\nvar _EventWrapper = require('./EventWrapper');\n\nvar _EventWrapper2 = _interopRequireDefault(_EventWrapper);\n\nvar _BackgroundWrapper = require('./BackgroundWrapper');\n\nvar _BackgroundWrapper2 = _interopRequireDefault(_BackgroundWrapper);\n\nvar _omit = require('lodash/omit');\n\nvar _omit2 = _interopRequireDefault(_omit);\n\nvar _defaults = require('lodash/defaults');\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _transform = require('lodash/transform');\n\nvar _transform2 = _interopRequireDefault(_transform);\n\nvar _mapValues = require('lodash/mapValues');\n\nvar _mapValues2 = _interopRequireDefault(_mapValues);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction viewNames(_views) {\n  return !Array.isArray(_views) ? Object.keys(_views) : _views;\n}\n\nfunction isValidView(view, _ref) {\n  var _views = _ref.views;\n  var names = viewNames(_views);\n  return names.indexOf(view) !== -1;\n}\n/**\n * react-big-calendar is a full featured Calendar component for managing events and dates. It uses\n * modern `flexbox` for layout, making it super responsive and performant. Leaving most of the layout heavy lifting\n * to the browser. __note:__ The default styles use `height: 100%` which means your container must set an explicit\n * height (feel free to adjust the styles to suit your specific needs).\n *\n * Big Calendar is unopiniated about editing and moving events, preferring to let you implement it in a way that makes\n * the most sense to your app. It also tries not to be prescriptive about your event data structures, just tell it\n * how to find the start and end datetimes and you can pass it whatever you want.\n *\n * One thing to note is that, `react-big-calendar` treats event start/end dates as an _exclusive_ range.\n * which means that the event spans up to, but not including, the end date. In the case\n * of displaying events on whole days, end dates are rounded _up_ to the next day. So an\n * event ending on `Apr 8th 12:00:00 am` will not appear on the 8th, whereas one ending\n * on `Apr 8th 12:01:00 am` will. If you want _inclusive_ ranges consider providing a\n * function `endAccessor` that returns the end date + 1 day for those events that end at midnight.\n */\n\n/**\n *\n *\n * @static\n * @memberof Calendar\n */\n\n\nvar Calendar = function (_React$Component) {\n  _inherits(Calendar, _React$Component);\n\n  function Calendar() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Calendar.prototype.render = function render() {\n    var _props = this.props,\n        view = _props.view,\n        toolbar = _props.toolbar,\n        events = _props.events,\n        culture = _props.culture,\n        _props$components = _props.components,\n        components = _props$components === undefined ? {} : _props$components,\n        _props$formats = _props.formats,\n        formats = _props$formats === undefined ? {} : _props$formats,\n        _props$messages = _props.messages,\n        messages = _props$messages === undefined ? {} : _props$messages,\n        style = _props.style,\n        className = _props.className,\n        elementProps = _props.elementProps,\n        current = _props.date,\n        getNow = _props.getNow,\n        length = _props.length,\n        props = _objectWithoutProperties(_props, ['view', 'toolbar', 'events', 'culture', 'components', 'formats', 'messages', 'style', 'className', 'elementProps', 'date', 'getNow', 'length']);\n\n    current = current || getNow();\n    formats = (0, _formats2.default)(formats);\n    messages = (0, _messages2.default)(messages);\n    var View = this.getView();\n    var names = viewNames(this.props.views);\n    var viewComponents = (0, _defaults2.default)(components[view] || {}, (0, _omit2.default)(components, names), {\n      eventWrapper: _EventWrapper2.default,\n      dayWrapper: _BackgroundWrapper2.default,\n      dateCellWrapper: _BackgroundWrapper2.default\n    });\n    var CalToolbar = components.toolbar || _Toolbar2.default;\n    var label = View.title(current, {\n      formats: formats,\n      culture: culture,\n      length: length\n    });\n    return _react2.default.createElement('div', _extends({}, elementProps, {\n      className: (0, _classnames2.default)(className, 'rbc-calendar', props.rtl && 'rbc-is-rtl'),\n      style: style\n    }), toolbar && _react2.default.createElement(CalToolbar, {\n      date: current,\n      view: view,\n      views: names,\n      label: label,\n      onViewChange: this.handleViewChange,\n      onNavigate: this.handleNavigate,\n      messages: messages\n    }), _react2.default.createElement(View, _extends({\n      ref: 'view'\n    }, props, formats, {\n      messages: messages,\n      culture: culture,\n      formats: undefined,\n      events: events,\n      date: current,\n      getNow: getNow,\n      length: length,\n      components: viewComponents,\n      getDrilldownView: this.getDrilldownView,\n      onNavigate: this.handleNavigate,\n      onDrillDown: this.handleDrillDown,\n      onSelectEvent: this.handleSelectEvent,\n      onDoubleClickEvent: this.handleDoubleClickEvent,\n      onSelectSlot: this.handleSelectSlot,\n      onShowMore: this._showMore\n    })));\n  };\n\n  return Calendar;\n}(_react2.default.Component);\n\nCalendar.propTypes = {\n  /**\n   * Props passed to main calendar `<div>`.\n   *\n   */\n  elementProps: _propTypes2.default.object,\n\n  /**\n   * The current date value of the calendar. Determines the visible view range.\n   * If `date` is omitted then the result of `getNow` is used; otherwise the\n   * current date is used.\n   *\n   * @controllable onNavigate\n   */\n  date: _propTypes2.default.instanceOf(Date),\n\n  /**\n   * The current view of the calendar.\n   *\n   * @default 'month'\n   * @controllable onView\n   */\n  view: _propTypes2.default.string,\n\n  /**\n   * The initial view set for the Calendar.\n   * @type Calendar.Views ('month'|'week'|'work_week'|'day'|'agenda')\n   * @default 'month'\n   */\n  defaultView: _propTypes2.default.string,\n\n  /**\n   * An array of event objects to display on the calendar. Events objects\n   * can be any shape, as long as the Calendar knows how to retrieve the\n   * following details of the event:\n   *\n   *  - start time\n   *  - end time\n   *  - title\n   *  - whether its an \"all day\" event or not\n   *  - any resource the event may be a related too\n   *\n   * Each of these properties can be customized or generated dynamically by\n   * setting the various \"accessor\" props. Without any configuration the default\n   * event should look like:\n   *\n   * ```js\n   * Event {\n   *   title: string,\n   *   start: Date,\n   *   end: Date,\n   *   allDay?: boolean\n   *   resource?: any,\n   * }\n   * ```\n   */\n  events: _propTypes2.default.arrayOf(_propTypes2.default.object),\n\n  /**\n   * Accessor for the event title, used to display event information. Should\n   * resolve to a `renderable` value.\n   *\n   * ```js\n   * string | (event: Object) => string\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  titleAccessor: _propTypes3.accessor,\n\n  /**\n   * Accessor for the event tooltip. Should\n   * resolve to a `renderable` value. Removes the tooltip if null.\n   *\n   * ```js\n   * string | (event: Object) => string\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  tooltipAccessor: _propTypes3.accessor,\n\n  /**\n   * Determines whether the event should be considered an \"all day\" event and ignore time.\n   * Must resolve to a `boolean` value.\n   *\n   * ```js\n   * string | (event: Object) => boolean\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  allDayAccessor: _propTypes3.accessor,\n\n  /**\n   * The start date/time of the event. Must resolve to a JavaScript `Date` object.\n   *\n   * ```js\n   * string | (event: Object) => Date\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  startAccessor: _propTypes3.accessor,\n\n  /**\n   * The end date/time of the event. Must resolve to a JavaScript `Date` object.\n   *\n   * ```js\n   * string | (event: Object) => Date\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  endAccessor: _propTypes3.accessor,\n\n  /**\n   * Returns the id of the `resource` that the event is a member of. This\n   * id should match at least one resource in the `resources` array.\n   *\n   * ```js\n   * string | (event: Object) => Date\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  resourceAccessor: _propTypes3.accessor,\n\n  /**\n   * An array of resource objects that map events to a specific resource.\n   * Resource objects, like events, can be any shape or have any properties,\n   * but should be uniquly identifiable via the `resourceIdAccessor`, as\n   * well as a \"title\" or name as provided by the `resourceTitleAccessor` prop.\n   */\n  resources: _propTypes2.default.arrayOf(_propTypes2.default.object),\n\n  /**\n   * Provides a unique identifier for each resource in the `resources` array\n   *\n   * ```js\n   * string | (resource: Object) => any\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  resourceIdAccessor: _propTypes3.accessor,\n\n  /**\n   * Provides a human readable name for the resource object, used in headers.\n   *\n   * ```js\n   * string | (resource: Object) => any\n   * ```\n   *\n   * @type {(func|string)}\n   */\n  resourceTitleAccessor: _propTypes3.accessor,\n\n  /**\n   * Determines the current date/time which is highlighted in the views.\n   *\n   * The value affects which day is shaded and which time is shown as\n   * the current time. It also affects the date used by the Today button in\n   * the toolbar.\n   *\n   * Providing a value here can be useful when you are implementing time zones\n   * using the `startAccessor` and `endAccessor` properties.\n   *\n   * @type {func}\n   * @default () => new Date()\n   */\n  getNow: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the `date` value changes.\n   *\n   * @controllable date\n   */\n  onNavigate: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the `view` value changes.\n   *\n   * @controllable view\n   */\n  onView: _propTypes2.default.func,\n\n  /**\n   * Callback fired when date header, or the truncated events links are clicked\n   *\n   */\n  onDrillDown: _propTypes2.default.func,\n\n  /**\n   * Callback fired when the visible date range changes. Returns an Array of dates\n   * or an object with start and end dates for BUILTIN views.\n   *\n   * Cutom views may return something different.\n   */\n  onRangeChange: _propTypes2.default.func,\n\n  /**\n   * A callback fired when a date selection is made. Only fires when `selectable` is `true`.\n   *\n   * ```js\n   * (\n   *   slotInfo: {\n   *     start: Date,\n   *     end: Date,\n   *     slots: Array<Date>,\n   *     action: \"select\" | \"click\" | \"doubleClick\",\n   *     bounds: ?{ // For \"select\" action\n   *       x: number,\n   *       y: number,\n   *       top: number,\n   *       right: number,\n   *       left: number,\n   *       bottom: number,\n   *     },\n   *     box: ?{ // For \"click\" or \"doubleClick\" actions\n   *       clientX: number,\n   *       clientY: number,\n   *       x: number,\n   *       y: number,\n   *     },\n   *   }\n   * ) => any\n   * ```\n   */\n  onSelectSlot: _propTypes2.default.func,\n\n  /**\n   * Callback fired when a calendar event is selected.\n   *\n   * ```js\n   * (event: Object, e: SyntheticEvent) => any\n   * ```\n   *\n   * @controllable selected\n   */\n  onSelectEvent: _propTypes2.default.func,\n\n  /**\n   * Callback fired when a calendar event is clicked twice.\n   *\n   * ```js\n   * (event: Object, e: SyntheticEvent) => void\n   * ```\n   */\n  onDoubleClickEvent: _propTypes2.default.func,\n\n  /**\n   * Callback fired when dragging a selection in the Time views.\n   *\n   * Returning `false` from the handler will prevent a selection.\n   *\n   * ```js\n   * (range: { start: Date, end: Date }) => ?boolean\n   * ```\n   */\n  onSelecting: _propTypes2.default.func,\n\n  /**\n   * The selected event, if any.\n   */\n  selected: _propTypes2.default.object,\n\n  /**\n   * An array of built-in view names to allow the calendar to display.\n   * accepts either an array of builtin view names,\n   *\n   * ```jsx\n   * views={['month', 'day', 'agenda']}\n   * ```\n   * or an object hash of the view name and the component (or boolean for builtin).\n   *\n   * ```jsx\n   * views={{\n   *   month: true,\n   *   week: false,\n   *   myweek: WorkWeekViewComponent,\n   * }}\n   * ```\n   *\n   * Custom views can be any React component, that implements the following\n   * interface:\n   *\n   * ```js\n   * interface View {\n   *   static title(date: Date, { formats: DateFormat[], culture: string?, ...props }): string\n   *   static navigate(date: Date, action: 'PREV' | 'NEXT' | 'DATE'): Date\n   * }\n   * ```\n   *\n   * @type Calendar.Views ('month'|'week'|'work_week'|'day'|'agenda')\n   * @View\n   ['month', 'week', 'day', 'agenda']\n   */\n  views: _propTypes3.views,\n\n  /**\n   * The string name of the destination view for drill-down actions, such\n   * as clicking a date header, or the truncated events links. If\n   * `getDrilldownView` is also specified it will be used instead.\n   *\n   * Set to `null` to disable drill-down actions.\n   *\n   * ```js\n   * <BigCalendar\n   *   drilldownView=\"agenda\"\n   * />\n   * ```\n   */\n  drilldownView: _propTypes2.default.string,\n\n  /**\n   * Functionally equivalent to `drilldownView`, but accepts a function\n   * that can return a view name. It's useful for customizing the drill-down\n   * actions depending on the target date and triggering view.\n   *\n   * Return `null` to disable drill-down actions.\n   *\n   * ```js\n   * <BigCalendar\n   *   getDrilldownView={(targetDate, currentViewName, configuredViewNames) =>\n   *     if (currentViewName === 'month' && configuredViewNames.includes('week'))\n   *       return 'week'\n   *\n   *     return null;\n   *   }}\n   * />\n   * ```\n   */\n  getDrilldownView: _propTypes2.default.func,\n\n  /**\n   * Determines the end date from date prop in the agenda view\n   * date prop + length (in number of days) = end date\n   */\n  length: _propTypes2.default.number,\n\n  /**\n   * Determines whether the toolbar is displayed\n   */\n  toolbar: _propTypes2.default.bool,\n\n  /**\n   * Show truncated events in an overlay when you click the \"+_x_ more\" link.\n   */\n  popup: _propTypes2.default.bool,\n\n  /**\n   * Distance in pixels, from the edges of the viewport, the \"show more\" overlay should be positioned.\n   *\n   * ```jsx\n   * <BigCalendar popupOffset={30}/>\n   * <BigCalendar popupOffset={{x: 30, y: 20}}/>\n   * ```\n   */\n  popupOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({\n    x: _propTypes2.default.number,\n    y: _propTypes2.default.number\n  })]),\n\n  /**\n   * Allows mouse selection of ranges of dates/times.\n   *\n   * The 'ignoreEvents' option prevents selection code from running when a\n   * drag begins over an event. Useful when you want custom event click or drag\n   * logic\n   */\n  selectable: _propTypes2.default.oneOf([true, false, 'ignoreEvents']),\n\n  /** Determines whether you want events to be resizable */\n  resizable: _propTypes2.default.bool,\n\n  /**\n   * Specifies the number of miliseconds the user must press and hold on the screen for a touch\n   * to be considered a \"long press.\" Long presses are used for time slot selection on touch\n   * devices.\n   *\n   * @type {number}\n   * @default 250\n   */\n  longPressThreshold: _propTypes2.default.number,\n\n  /**\n   * Determines the selectable time increments in week and day views\n   */\n  step: _propTypes2.default.number,\n\n  /**\n   * The number of slots per \"section\" in the time grid views. Adjust with `step`\n   * to change the default of 1 hour long groups, with 30 minute slots.\n   */\n  timeslots: _propTypes2.default.number,\n\n  /**\n   *Switch the calendar to a `right-to-left` read direction.\n   */\n  rtl: _propTypes2.default.bool,\n\n  /**\n   * Optionally provide a function that returns an object of className or style props\n   * to be applied to the the event node.\n   *\n   * ```js\n   * (\n   * \tevent: Object,\n   * \tstart: Date,\n   * \tend: Date,\n   * \tisSelected: boolean\n   * ) => { className?: string, style?: Object }\n   * ```\n   */\n  eventPropGetter: _propTypes2.default.func,\n\n  /**\n   * Optionally provide a function that returns an object of className or style props\n   * to be applied to the the time-slot node. Caution! Styles that change layout or\n   * position may break the calendar in unexpected ways.\n   *\n   * ```js\n   * (date: Date) => { className?: string, style?: Object }\n   * ```\n   */\n  slotPropGetter: _propTypes2.default.func,\n\n  /**\n   * Optionally provide a function that returns an object of className or style props\n   * to be applied to the the day background. Caution! Styles that change layout or\n   * position may break the calendar in unexpected ways.\n   *\n   * ```js\n   * (date: Date) => { className?: string, style?: Object }\n   * ```\n   */\n  dayPropGetter: _propTypes2.default.func,\n\n  /**\n   * Support to show multi-day events with specific start and end times in the\n   * main time grid (rather than in the all day header).\n   *\n   * **Note: This may cause calendars with several events to look very busy in\n   * the week and day views.**\n   */\n  showMultiDayTimes: _propTypes2.default.bool,\n\n  /**\n   * Constrains the minimum _time_ of the Day and Week views.\n   */\n  min: _propTypes2.default.instanceOf(Date),\n\n  /**\n   * Constrains the maximum _time_ of the Day and Week views.\n   */\n  max: _propTypes2.default.instanceOf(Date),\n\n  /**\n   * Determines how far down the scroll pane is initially scrolled down.\n   */\n  scrollToTime: _propTypes2.default.instanceOf(Date),\n\n  /**\n   * Specify a specific culture code for the Calendar.\n   *\n   * **Note: it's generally better to handle this globally via your i18n library.**\n   */\n  culture: _propTypes2.default.string,\n\n  /**\n   * Localizer specific formats, tell the Calendar how to format and display dates.\n   *\n   * `format` types are dependent on the configured localizer; both Moment and Globalize\n   * accept strings of tokens according to their own specification, such as: `'DD mm yyyy'`.\n   *\n   * ```jsx\n   * let formats = {\n   *   dateFormat: 'dd',\n   *\n   *   dayFormat: (date, culture, localizer) =>\n   *     localizer.format(date, 'DDD', culture),\n   *\n   *   dayRangeHeaderFormat: ({ start, end }, culture, local) =>\n   *     local.format(start, { date: 'short' }, culture) + ' — ' +\n   *     local.format(end, { date: 'short' }, culture)\n   * }\n   *\n   * <Calendar formats={formats} />\n   * ```\n   *\n   * All localizers accept a function of\n   * the form `(date: Date, culture: ?string, localizer: Localizer) -> string`\n   */\n  formats: _propTypes2.default.shape({\n    /**\n     * Format for the day of the month heading in the Month view.\n     * e.g. \"01\", \"02\", \"03\", etc\n     */\n    dateFormat: _propTypes3.dateFormat,\n\n    /**\n     * A day of the week format for Week and Day headings,\n     * e.g. \"Wed 01/04\"\n     *\n     */\n    dayFormat: _propTypes3.dateFormat,\n\n    /**\n     * Week day name format for the Month week day headings,\n     * e.g: \"Sun\", \"Mon\", \"Tue\", etc\n     *\n     */\n    weekdayFormat: _propTypes3.dateFormat,\n\n    /**\n     * The timestamp cell formats in Week and Time views, e.g. \"4:00 AM\"\n     */\n    timeGutterFormat: _propTypes3.dateFormat,\n\n    /**\n     * Toolbar header format for the Month view, e.g \"2015 April\"\n     *\n     */\n    monthHeaderFormat: _propTypes3.dateFormat,\n\n    /**\n     * Toolbar header format for the Week views, e.g. \"Mar 29 - Apr 04\"\n     */\n    dayRangeHeaderFormat: _propTypes3.dateRangeFormat,\n\n    /**\n     * Toolbar header format for the Day view, e.g. \"Wednesday Apr 01\"\n     */\n    dayHeaderFormat: _propTypes3.dateFormat,\n\n    /**\n     * Toolbar header format for the Agenda view, e.g. \"4/1/2015 — 5/1/2015\"\n     */\n    agendaHeaderFormat: _propTypes3.dateRangeFormat,\n\n    /**\n     * A time range format for selecting time slots, e.g \"8:00am — 2:00pm\"\n     */\n    selectRangeFormat: _propTypes3.dateRangeFormat,\n    agendaDateFormat: _propTypes3.dateFormat,\n    agendaTimeFormat: _propTypes3.dateFormat,\n    agendaTimeRangeFormat: _propTypes3.dateRangeFormat,\n\n    /**\n     * Time range displayed on events.\n     */\n    eventTimeRangeFormat: _propTypes3.dateRangeFormat,\n\n    /**\n     * An optional event time range for events that continue onto another day\n     */\n    eventTimeRangeStartFormat: _propTypes3.dateFormat,\n\n    /**\n     * An optional event time range for events that continue from another day\n     */\n    eventTimeRangeEndFormat: _propTypes3.dateFormat\n  }),\n\n  /**\n   * Customize how different sections of the calendar render by providing custom Components.\n   * In particular the `Event` component can be specified for the entire calendar, or you can\n   * provide an individual component for each view type.\n   *\n   * ```jsx\n   * let components = {\n   *   event: MyEvent, // used by each view (Month, Day, Week)\n   *   toolbar: MyToolbar,\n   *   agenda: {\n   *   \t event: MyAgendaEvent // with the agenda view use a different component to render events\n   *   }\n   * }\n   * <Calendar components={components} />\n   * ```\n   */\n  components: _propTypes2.default.shape({\n    event: _propTypes3.elementType,\n    eventWrapper: _propTypes3.elementType,\n    dayWrapper: _propTypes3.elementType,\n    dateCellWrapper: _propTypes3.elementType,\n    toolbar: _propTypes3.elementType,\n    agenda: _propTypes2.default.shape({\n      date: _propTypes3.elementType,\n      time: _propTypes3.elementType,\n      event: _propTypes3.elementType\n    }),\n    day: _propTypes2.default.shape({\n      header: _propTypes3.elementType,\n      event: _propTypes3.elementType\n    }),\n    week: _propTypes2.default.shape({\n      header: _propTypes3.elementType,\n      event: _propTypes3.elementType\n    }),\n    month: _propTypes2.default.shape({\n      header: _propTypes3.elementType,\n      dateHeader: _propTypes3.elementType,\n      event: _propTypes3.elementType\n    })\n  }),\n\n  /**\n   * String messages used throughout the component, override to provide localizations\n   */\n  messages: _propTypes2.default.shape({\n    allDay: _propTypes2.default.node,\n    previous: _propTypes2.default.node,\n    next: _propTypes2.default.node,\n    today: _propTypes2.default.node,\n    month: _propTypes2.default.node,\n    week: _propTypes2.default.node,\n    day: _propTypes2.default.node,\n    agenda: _propTypes2.default.node,\n    date: _propTypes2.default.node,\n    time: _propTypes2.default.node,\n    event: _propTypes2.default.node,\n    showMore: _propTypes2.default.func\n  })\n};\nCalendar.defaultProps = {\n  elementProps: {},\n  popup: false,\n  toolbar: true,\n  view: _constants.views.MONTH,\n  views: [_constants.views.MONTH, _constants.views.WEEK, _constants.views.DAY, _constants.views.AGENDA],\n  step: 30,\n  length: 30,\n  drilldownView: _constants.views.DAY,\n  titleAccessor: 'title',\n  tooltipAccessor: 'title',\n  allDayAccessor: 'allDay',\n  startAccessor: 'start',\n  endAccessor: 'end',\n  resourceAccessor: 'resourceId',\n  resourceIdAccessor: 'id',\n  resourceTitleAccessor: 'title',\n  longPressThreshold: 250,\n  getNow: function getNow() {\n    return new Date();\n  }\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.getViews = function () {\n    var views = _this2.props.views;\n\n    if (Array.isArray(views)) {\n      return (0, _transform2.default)(views, function (obj, name) {\n        return obj[name] = _Views2.default[name];\n      }, {});\n    }\n\n    if ((typeof views === 'undefined' ? 'undefined' : _typeof(views)) === 'object') {\n      return (0, _mapValues2.default)(views, function (value, key) {\n        if (value === true) {\n          return _Views2.default[key];\n        }\n\n        return value;\n      });\n    }\n\n    return _Views2.default;\n  };\n\n  this.getView = function () {\n    var views = _this2.getViews();\n\n    return views[_this2.props.view];\n  };\n\n  this.getDrilldownView = function (date) {\n    var _props2 = _this2.props,\n        view = _props2.view,\n        drilldownView = _props2.drilldownView,\n        getDrilldownView = _props2.getDrilldownView;\n    if (!getDrilldownView) return drilldownView;\n    return getDrilldownView(date, view, Object.keys(_this2.getViews()));\n  };\n\n  this.handleRangeChange = function (date, view) {\n    var onRangeChange = _this2.props.onRangeChange;\n\n    if (onRangeChange) {\n      if (view.range) {\n        onRangeChange(view.range(date, {}));\n      } else {\n        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(true, 'onRangeChange prop not supported for this view') : void 0;\n      }\n    }\n  };\n\n  this.handleNavigate = function (action, newDate) {\n    var _props3 = _this2.props,\n        view = _props3.view,\n        date = _props3.date,\n        getNow = _props3.getNow,\n        onNavigate = _props3.onNavigate,\n        props = _objectWithoutProperties(_props3, ['view', 'date', 'getNow', 'onNavigate']);\n\n    var ViewComponent = _this2.getView();\n\n    var today = getNow();\n    date = (0, _move2.default)(ViewComponent, _extends({}, props, {\n      action: action,\n      date: newDate || date || today,\n      today: today\n    }));\n    onNavigate(date, view, action);\n\n    _this2.handleRangeChange(date, ViewComponent);\n  };\n\n  this.handleViewChange = function (view) {\n    if (view !== _this2.props.view && isValidView(view, _this2.props)) {\n      _this2.props.onView(view);\n    }\n\n    var views = _this2.getViews();\n\n    _this2.handleRangeChange(_this2.props.date, views[view]);\n  };\n\n  this.handleSelectEvent = function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    (0, _helpers.notify)(_this2.props.onSelectEvent, args);\n  };\n\n  this.handleDoubleClickEvent = function () {\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    (0, _helpers.notify)(_this2.props.onDoubleClickEvent, args);\n  };\n\n  this.handleSelectSlot = function (slotInfo) {\n    (0, _helpers.notify)(_this2.props.onSelectSlot, slotInfo);\n  };\n\n  this.handleDrillDown = function (date, view) {\n    var onDrillDown = _this2.props.onDrillDown;\n\n    if (onDrillDown) {\n      onDrillDown(date, view, _this2.drilldownView);\n      return;\n    }\n\n    if (view) _this2.handleViewChange(view);\n\n    _this2.handleNavigate(_constants.navigate.DATE, date);\n  };\n};\n\nexports.default = (0, _uncontrollable2.default)(Calendar, {\n  view: 'onView',\n  date: 'onNavigate',\n  selected: 'onSelectEvent'\n});\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}