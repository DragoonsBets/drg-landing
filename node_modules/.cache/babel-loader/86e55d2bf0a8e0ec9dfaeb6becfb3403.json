{"ast":null,"code":"var MultipleTargetSource = \"import React, { Component } from \\\"react\\\";\\nimport { DragDropContext, Droppable, Draggable } from \\\"react-beautiful-dnd\\\";\\n\\n// fake data generator\\nconst getItems = (count, offset = 0) =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: `item-${k + offset}`,\\n      content: `item ${k + offset}`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\n/**\\n * Moves an item from one list to another list.\\n */\\nconst move = (source, destination, droppableSource, droppableDestination) => {\\n   const sourceClone = Array.from(source);\\n   const destClone = Array.from(destination);\\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\\n\\n   destClone.splice(droppableDestination.index, 0, removed);\\n\\n   const result = {};\\n   result[droppableSource.droppableId] = sourceClone;\\n   result[droppableDestination.droppableId] = destClone;\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \\\"none\\\",\\n   padding: grid * 2,\\n   margin: `0 0 ${grid}px 0`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \\\"lightgreen\\\" : \\\"grey\\\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \\\"lightblue\\\" : \\\"lightgrey\\\",\\n   padding: grid,\\n   width: 250\\n});\\n\\nclass multipleTarget extends Component {\\n   state = {\\n      items: getItems(10),\\n      selected: getItems(5, 10)\\n   };\\n\\n   /**\\n    * A semi-generic way to handle multiple lists. Matches\\n    * the IDs of the droppable container to the names of the\\n    * source arrays stored in the state.\\n    */\\n   id2List = {\\n      droppable: \\\"items\\\",\\n      droppable2: \\\"selected\\\"\\n   };\\n\\n   getList = id => this.state[this.id2List[id]];\\n\\n   onDragEnd = result => {\\n      const { source, destination } = result;\\n\\n      // dropped outside the list\\n      if (!destination) {\\n         return;\\n      }\\n\\n      if (source.droppableId === destination.droppableId) {\\n         const items = reorder(\\n            this.getList(source.droppableId),\\n            source.index,\\n            destination.index\\n         );\\n\\n         let state = { items };\\n\\n         if (source.droppableId === \\\"droppable2\\\") {\\n            state = { selected: items };\\n         }\\n\\n         this.setState(state);\\n      } else {\\n         const result = move(\\n            this.getList(source.droppableId),\\n            this.getList(destination.droppableId),\\n            source,\\n            destination\\n         );\\n\\n         this.setState({\\n            items: result.droppable,\\n            selected: result.droppable2\\n         });\\n      }\\n   };\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\\\"droppable\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n            <Droppable droppableId=\\\"droppable2\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                  >\\n                     {this.state.selected.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\nexport default multipleTarget;\\n\";\nexport default MultipleTargetSource;","map":{"version":3,"sources":["/Users/ranaway/Documents/Proyectos/apex-react-drg/src/views/components/extra/exampleSource/dndMultipleTarget.js"],"names":["MultipleTargetSource"],"mappings":"AAAA,IAAMA,oBAAoB,s4LAA1B;AAyLA,eAAeA,oBAAf","sourcesContent":["const MultipleTargetSource = `import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n   Array.from({ length: count }, (v, k) => k).map(k => ({\n      id: \\`item-\\${k + offset}\\`,\n      content: \\`item \\${k + offset}\\`\n   }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n   const result = Array.from(list);\n   const [removed] = result.splice(startIndex, 1);\n   result.splice(endIndex, 0, removed);\n\n   return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n   const sourceClone = Array.from(source);\n   const destClone = Array.from(destination);\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n   destClone.splice(droppableDestination.index, 0, removed);\n\n   const result = {};\n   result[droppableSource.droppableId] = sourceClone;\n   result[droppableDestination.droppableId] = destClone;\n\n   return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n   // some basic styles to make the items look a bit nicer\n   userSelect: \"none\",\n   padding: grid * 2,\n   margin: \\`0 0 \\${grid}px 0\\`,\n\n   // change background colour if dragging\n   background: isDragging ? \"lightgreen\" : \"grey\",\n\n   // styles we need to apply on draggables\n   ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n   padding: grid,\n   width: 250\n});\n\nclass multipleTarget extends Component {\n   state = {\n      items: getItems(10),\n      selected: getItems(5, 10)\n   };\n\n   /**\n    * A semi-generic way to handle multiple lists. Matches\n    * the IDs of the droppable container to the names of the\n    * source arrays stored in the state.\n    */\n   id2List = {\n      droppable: \"items\",\n      droppable2: \"selected\"\n   };\n\n   getList = id => this.state[this.id2List[id]];\n\n   onDragEnd = result => {\n      const { source, destination } = result;\n\n      // dropped outside the list\n      if (!destination) {\n         return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n         const items = reorder(\n            this.getList(source.droppableId),\n            source.index,\n            destination.index\n         );\n\n         let state = { items };\n\n         if (source.droppableId === \"droppable2\") {\n            state = { selected: items };\n         }\n\n         this.setState(state);\n      } else {\n         const result = move(\n            this.getList(source.droppableId),\n            this.getList(destination.droppableId),\n            source,\n            destination\n         );\n\n         this.setState({\n            items: result.droppable,\n            selected: result.droppable2\n         });\n      }\n   };\n\n   // Normally you would want to split things out into separate components.\n   // But in this example everything is just done in one place for simplicity\n   render() {\n      return (\n         <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"droppable\">\n               {(provided, snapshot) => (\n                  <div\n                     ref={provided.innerRef}\n                     style={getListStyle(snapshot.isDraggingOver)}\n                  >\n                     {this.state.items.map((item, index) => (\n                        <Draggable\n                           key={item.id}\n                           draggableId={item.id}\n                           index={index}\n                        >\n                           {(provided, snapshot) => (\n                              <div\n                                 ref={provided.innerRef}\n                                 {...provided.draggableProps}\n                                 {...provided.dragHandleProps}\n                                 style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                 )}\n                              >\n                                 {item.content}\n                              </div>\n                           )}\n                        </Draggable>\n                     ))}\n                     {provided.placeholder}\n                  </div>\n               )}\n            </Droppable>\n            <Droppable droppableId=\"droppable2\">\n               {(provided, snapshot) => (\n                  <div\n                     ref={provided.innerRef}\n                     style={getListStyle(snapshot.isDraggingOver)}\n                  >\n                     {this.state.selected.map((item, index) => (\n                        <Draggable\n                           key={item.id}\n                           draggableId={item.id}\n                           index={index}\n                        >\n                           {(provided, snapshot) => (\n                              <div\n                                 ref={provided.innerRef}\n                                 {...provided.draggableProps}\n                                 {...provided.dragHandleProps}\n                                 style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                 )}\n                              >\n                                 {item.content}\n                              </div>\n                           )}\n                        </Draggable>\n                     ))}\n                     {provided.placeholder}\n                  </div>\n               )}\n            </Droppable>\n         </DragDropContext>\n      );\n   }\n}\nexport default multipleTarget;\n`;\nexport default MultipleTargetSource;\n"]},"metadata":{},"sourceType":"module"}