{"ast":null,"code":"var HorizontalListSource = \"import React, { Component } from \\\"react\\\";\\nimport { DragDropContext, Droppable, Draggable } from \\\"react-beautiful-dnd\\\";\\n\\n// fake data generator\\nconst getItems = count =>\\n   Array.from({ length: count }, (v, k) => k).map(k => ({\\n      id: `item-${k}`,\\n      content: `item ${k}`\\n   }));\\n\\n// a little function to help us with reordering the result\\nconst reorder = (list, startIndex, endIndex) => {\\n   const result = Array.from(list);\\n   const [removed] = result.splice(startIndex, 1);\\n   result.splice(endIndex, 0, removed);\\n\\n   return result;\\n};\\n\\nconst grid = 8;\\n\\nconst getItemStyle = (isDragging, draggableStyle) => ({\\n   // some basic styles to make the items look a bit nicer\\n   userSelect: \\\"none\\\",\\n   padding: grid * 2,\\n   margin: `0 ${grid}px 0 0`,\\n\\n   // change background colour if dragging\\n   background: isDragging ? \\\"lightgreen\\\" : \\\"grey\\\",\\n\\n   // styles we need to apply on draggables\\n   ...draggableStyle\\n});\\n\\nconst getListStyle = isDraggingOver => ({\\n   background: isDraggingOver ? \\\"lightblue\\\" : \\\"lightgrey\\\",\\n   display: \\\"flex\\\",\\n   padding: grid,\\n   overflow: \\\"auto\\\"\\n});\\n\\nclass HorizontalList extends Component {\\n   constructor(props) {\\n      super(props);\\n      this.state = {\\n         items: getItems(6)\\n      };\\n      this.onDragEnd = this.onDragEnd.bind(this);\\n   }\\n\\n   onDragEnd(result) {\\n      // dropped outside the list\\n      if (!result.destination) {\\n         return;\\n      }\\n\\n      const items = reorder(\\n         this.state.items,\\n         result.source.index,\\n         result.destination.index\\n      );\\n\\n      this.setState({\\n         items\\n      });\\n   }\\n\\n   // Normally you would want to split things out into separate components.\\n   // But in this example everything is just done in one place for simplicity\\n   render() {\\n      return (\\n         <DragDropContext onDragEnd={this.onDragEnd}>\\n            <Droppable droppableId=\\\"droppable\\\" direction=\\\"horizontal\\\">\\n               {(provided, snapshot) => (\\n                  <div\\n                     ref={provided.innerRef}\\n                     style={getListStyle(snapshot.isDraggingOver)}\\n                     {...provided.droppableProps}\\n                  >\\n                     {this.state.items.map((item, index) => (\\n                        <Draggable\\n                           key={item.id}\\n                           draggableId={item.id}\\n                           index={index}\\n                        >\\n                           {(provided, snapshot) => (\\n                              <div\\n                                 ref={provided.innerRef}\\n                                 {...provided.draggableProps}\\n                                 {...provided.dragHandleProps}\\n                                 style={getItemStyle(\\n                                    snapshot.isDragging,\\n                                    provided.draggableProps.style\\n                                 )}\\n                              >\\n                                 {item.content}\\n                              </div>\\n                           )}\\n                        </Draggable>\\n                     ))}\\n                     {provided.placeholder}\\n                  </div>\\n               )}\\n            </Droppable>\\n         </DragDropContext>\\n      );\\n   }\\n}\\nexport default HorizontalList;\\n\";\nexport default HorizontalListSource;","map":{"version":3,"sources":["/Users/ranaway/Documents/Proyectos/apex-react/src/views/components/extra/exampleSource/dndHorizontalList.js"],"names":["HorizontalListSource"],"mappings":"AAAA,IAAMA,oBAAoB,60GAA1B;AA+GA,eAAeA,oBAAf","sourcesContent":["const HorizontalListSource = `import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n   Array.from({ length: count }, (v, k) => k).map(k => ({\n      id: \\`item-\\${k}\\`,\n      content: \\`item \\${k}\\`\n   }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n   const result = Array.from(list);\n   const [removed] = result.splice(startIndex, 1);\n   result.splice(endIndex, 0, removed);\n\n   return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n   // some basic styles to make the items look a bit nicer\n   userSelect: \"none\",\n   padding: grid * 2,\n   margin: \\`0 \\${grid}px 0 0\\`,\n\n   // change background colour if dragging\n   background: isDragging ? \"lightgreen\" : \"grey\",\n\n   // styles we need to apply on draggables\n   ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n   background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n   display: \"flex\",\n   padding: grid,\n   overflow: \"auto\"\n});\n\nclass HorizontalList extends Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         items: getItems(6)\n      };\n      this.onDragEnd = this.onDragEnd.bind(this);\n   }\n\n   onDragEnd(result) {\n      // dropped outside the list\n      if (!result.destination) {\n         return;\n      }\n\n      const items = reorder(\n         this.state.items,\n         result.source.index,\n         result.destination.index\n      );\n\n      this.setState({\n         items\n      });\n   }\n\n   // Normally you would want to split things out into separate components.\n   // But in this example everything is just done in one place for simplicity\n   render() {\n      return (\n         <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n               {(provided, snapshot) => (\n                  <div\n                     ref={provided.innerRef}\n                     style={getListStyle(snapshot.isDraggingOver)}\n                     {...provided.droppableProps}\n                  >\n                     {this.state.items.map((item, index) => (\n                        <Draggable\n                           key={item.id}\n                           draggableId={item.id}\n                           index={index}\n                        >\n                           {(provided, snapshot) => (\n                              <div\n                                 ref={provided.innerRef}\n                                 {...provided.draggableProps}\n                                 {...provided.dragHandleProps}\n                                 style={getItemStyle(\n                                    snapshot.isDragging,\n                                    provided.draggableProps.style\n                                 )}\n                              >\n                                 {item.content}\n                              </div>\n                           )}\n                        </Draggable>\n                     ))}\n                     {provided.placeholder}\n                  </div>\n               )}\n            </Droppable>\n         </DragDropContext>\n      );\n   }\n}\nexport default HorizontalList;\n`;\n\nexport default HorizontalListSource;\n"]},"metadata":{},"sourceType":"module"}