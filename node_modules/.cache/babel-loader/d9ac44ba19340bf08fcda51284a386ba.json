{"ast":null,"code":"import _toConsumableArray from \"/Users/ranaway/Documents/Proyectos/apex-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/ranaway/Documents/Proyectos/apex-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ranaway/Documents/Proyectos/apex-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ranaway/Documents/Proyectos/apex-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ranaway/Documents/Proyectos/apex-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ranaway/Documents/Proyectos/apex-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/ranaway/Documents/Proyectos/apex-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/ranaway/Documents/Proyectos/apex-react/src/views/tables/examples/reactSelectTable.js\";\nimport React from \"react\"; // Import React Table\n\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport Chance from \"chance\";\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\nimport testData from \"../data/test-data\";\nvar CheckboxTable = checkboxHOC(ReactTable);\nvar chance = new Chance();\n\nfunction getData() {\n  var data = testData.map(function (item) {\n    // using chancejs to generate guid\n    // shortid is probably better but seems to have performance issues\n    // on codesandbox.io\n    var _id = chance.guid();\n\n    return _objectSpread({\n      _id: _id\n    }, item);\n  });\n  return data;\n}\n\nfunction getColumns(data) {\n  var columns = [];\n  var sample = data[0];\n  Object.keys(sample).forEach(function (key) {\n    if (key !== \"_id\") {\n      columns.push({\n        accessor: key,\n        Header: key\n      });\n    }\n  });\n  return columns;\n}\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  function Example() {\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Example).call(this));\n\n    _this.toggleSelection = function (key, shift, row) {\n      /*\n        Implementation of how to manage the selection state is up to the developer.\n        This implementation uses an array stored in the component state.\n        Other implementations could use object keys, a Javascript Set, or Redux... etc.\n      */\n      // start off with the existing state\n      var selection = _toConsumableArray(_this.state.selection);\n\n      var keyIndex = selection.indexOf(key); // check to see if the key exists\n\n      if (keyIndex >= 0) {\n        // it does exist so we will remove it using destructing\n        selection = [].concat(_toConsumableArray(selection.slice(0, keyIndex)), _toConsumableArray(selection.slice(keyIndex + 1)));\n      } else {\n        // it does not exist so add it\n        selection.push(key);\n      } // update the state\n\n\n      _this.setState({\n        selection: selection\n      });\n    };\n\n    _this.toggleAll = function () {\n      /*\n        'toggleAll' is a tricky concept with any filterable table\n        do you just select ALL the records that are in your data?\n        OR\n        do you only select ALL the records that are in the current filtered data?\n        \n        The latter makes more sense because 'selection' is a visual thing for the user.\n        This is especially true if you are going to implement a set of external functions\n        that act on the selected information (you would not want to DELETE the wrong thing!).\n        \n        So, to that end, access to the internals of ReactTable are required to get what is\n        currently visible in the table (either on the current page or any other page).\n        \n        The HOC provides a method call 'getWrappedInstance' to get a ref to the wrapped\n        ReactTable and then get the internal state and the 'sortedData'. \n        That can then be iterrated to get all the currently visible records and set\n        the selection state.\n      */\n      var selectAll = _this.state.selectAll ? false : true;\n      var selection = [];\n\n      if (selectAll) {\n        // we need to get at the internals of ReactTable\n        var wrappedInstance = _this.checkboxTable.getWrappedInstance(); // the 'sortedData' property contains the currently accessible records based on the filter and sort\n\n\n        var currentRecords = wrappedInstance.getResolvedState().sortedData; // we just push all the IDs onto the selection array\n\n        currentRecords.forEach(function (item) {\n          selection.push(item._original._id);\n        });\n      }\n\n      _this.setState({\n        selectAll: selectAll,\n        selection: selection\n      });\n    };\n\n    _this.isSelected = function (key) {\n      /*\n        Instead of passing our external selection state we provide an 'isSelected'\n        callback and detect the selection state ourselves. This allows any implementation\n        for selection (either an array, object keys, or even a Javascript Set object).\n      */\n      return _this.state.selection.includes(key);\n    };\n\n    _this.logSelection = function () {\n      console.log(\"selection:\", _this.state.selection);\n    };\n\n    var data = getData();\n    var columns = getColumns(data);\n    _this.state = {\n      data: data,\n      columns: columns,\n      selection: [],\n      selectAll: false\n    };\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var toggleSelection = this.toggleSelection,\n          toggleAll = this.toggleAll,\n          isSelected = this.isSelected,\n          logSelection = this.logSelection;\n      var _this$state = this.state,\n          data = _this$state.data,\n          columns = _this$state.columns,\n          selectAll = _this$state.selectAll;\n      var checkboxProps = {\n        selectAll: selectAll,\n        isSelected: isSelected,\n        toggleSelection: toggleSelection,\n        toggleAll: toggleAll,\n        selectType: \"checkbox\",\n        getTrProps: function getTrProps(s, r) {\n          // someone asked for an example of a background color change\n          // here it is...\n          var selected = _this2.isSelected(r.original._id);\n\n          return {\n            style: {\n              backgroundColor: selected ? \"lightgreen\" : \"inherit\" // color: selected ? 'white' : 'inherit',\n\n            }\n          };\n        }\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: logSelection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Log Selection\"), React.createElement(CheckboxTable, Object.assign({\n        ref: function ref(r) {\n          return _this2.checkboxTable = r;\n        },\n        data: data,\n        columns: columns,\n        defaultPageSize: 10,\n        className: \"-striped -highlight\"\n      }, checkboxProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport { Example as default };","map":{"version":3,"sources":["/Users/ranaway/Documents/Proyectos/apex-react/src/views/tables/examples/reactSelectTable.js"],"names":["React","ReactTable","Chance","checkboxHOC","testData","CheckboxTable","chance","getData","data","map","item","_id","guid","getColumns","columns","sample","Object","keys","forEach","key","push","accessor","Header","Example","toggleSelection","shift","row","selection","state","keyIndex","indexOf","slice","setState","toggleAll","selectAll","wrappedInstance","checkboxTable","getWrappedInstance","currentRecords","getResolvedState","sortedData","_original","isSelected","includes","logSelection","console","log","checkboxProps","selectType","getTrProps","s","r","selected","original","style","backgroundColor","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\n// Import React Table\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nimport Chance from \"chance\";\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\nimport testData from \"../data/test-data\";\n\nconst CheckboxTable = checkboxHOC(ReactTable);\n\nconst chance = new Chance();\n\nfunction getData() {\n  const data = testData.map(item => {\n    // using chancejs to generate guid\n    // shortid is probably better but seems to have performance issues\n    // on codesandbox.io\n    const _id = chance.guid();\n    return {\n      _id,\n      ...item\n    };\n  });\n  return data;\n}\n\nfunction getColumns(data) {\n  const columns = [];\n  const sample = data[0];\n  Object.keys(sample).forEach(key => {\n    if (key !== \"_id\") {\n      columns.push({\n        accessor: key,\n        Header: key\n      });\n    }\n  });\n  return columns;\n}\n\nexport default class Example extends React.Component {\n  constructor() {\n    super();\n    const data = getData();\n    const columns = getColumns(data);\n    this.state = {\n      data,\n      columns,\n      selection: [],\n      selectAll: false\n    };\n  }\n\n  toggleSelection = (key, shift, row) => {\n    /*\n      Implementation of how to manage the selection state is up to the developer.\n      This implementation uses an array stored in the component state.\n      Other implementations could use object keys, a Javascript Set, or Redux... etc.\n    */\n    // start off with the existing state\n    let selection = [...this.state.selection];\n    const keyIndex = selection.indexOf(key);\n    // check to see if the key exists\n    if (keyIndex >= 0) {\n      // it does exist so we will remove it using destructing\n      selection = [\n        ...selection.slice(0, keyIndex),\n        ...selection.slice(keyIndex + 1)\n      ];\n    } else {\n      // it does not exist so add it\n      selection.push(key);\n    }\n    // update the state\n    this.setState({ selection });\n  };\n\n  toggleAll = () => {\n    /*\n      'toggleAll' is a tricky concept with any filterable table\n      do you just select ALL the records that are in your data?\n      OR\n      do you only select ALL the records that are in the current filtered data?\n      \n      The latter makes more sense because 'selection' is a visual thing for the user.\n      This is especially true if you are going to implement a set of external functions\n      that act on the selected information (you would not want to DELETE the wrong thing!).\n      \n      So, to that end, access to the internals of ReactTable are required to get what is\n      currently visible in the table (either on the current page or any other page).\n      \n      The HOC provides a method call 'getWrappedInstance' to get a ref to the wrapped\n      ReactTable and then get the internal state and the 'sortedData'. \n      That can then be iterrated to get all the currently visible records and set\n      the selection state.\n    */\n    const selectAll = this.state.selectAll ? false : true;\n    const selection = [];\n    if (selectAll) {\n      // we need to get at the internals of ReactTable\n      const wrappedInstance = this.checkboxTable.getWrappedInstance();\n      // the 'sortedData' property contains the currently accessible records based on the filter and sort\n      const currentRecords = wrappedInstance.getResolvedState().sortedData;\n      // we just push all the IDs onto the selection array\n      currentRecords.forEach(item => {\n        selection.push(item._original._id);\n      });\n    }\n    this.setState({ selectAll, selection });\n  };\n\n  isSelected = key => {\n    /*\n      Instead of passing our external selection state we provide an 'isSelected'\n      callback and detect the selection state ourselves. This allows any implementation\n      for selection (either an array, object keys, or even a Javascript Set object).\n    */\n    return this.state.selection.includes(key);\n  };\n\n  logSelection = () => {\n    console.log(\"selection:\", this.state.selection);\n  };\n\n  render() {\n    const { toggleSelection, toggleAll, isSelected, logSelection } = this;\n    const { data, columns, selectAll } = this.state;\n\n    const checkboxProps = {\n      selectAll,\n      isSelected,\n      toggleSelection,\n      toggleAll,\n      selectType: \"checkbox\",\n      getTrProps: (s, r) => {\n        // someone asked for an example of a background color change\n        // here it is...\n        const selected = this.isSelected(r.original._id);\n        return {\n          style: {\n            backgroundColor: selected ? \"lightgreen\" : \"inherit\"\n            // color: selected ? 'white' : 'inherit',\n          }\n        };\n      }\n    };\n\n    return (\n      <div>\n        <button className=\"btn btn-primary\" onClick={logSelection}>Log Selection</button>\n        <CheckboxTable\n          ref={r => (this.checkboxTable = r)}\n          data={data}\n          columns={columns}\n          defaultPageSize={10}\n          className=\"-striped -highlight\"\n          {...checkboxProps}\n        />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}